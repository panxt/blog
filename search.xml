<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PostgreSQL熟悉和使用</title>
      <link href="/blog/2025/02/04/PostgreSQL%E7%86%9F%E6%82%89%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2025/02/04/PostgreSQL%E7%86%9F%E6%82%89%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>比较 <strong>PostgreSQL</strong> 和 <strong>MySQL</strong> 在各方面的差异（包括性能、语法、功能等），我建议你可以分成以下几个主要部分进行对比。每个部分都可以包含简短的描述、SQL 示例、以及性能测试的结果（如果有）。以下是一个大纲以及一些示例内容。</p><hr><h2 id="PostgreSQL-vs-MySQL-完整对比文档"><a href="#PostgreSQL-vs-MySQL-完整对比文档" class="headerlink" title="PostgreSQL vs MySQL: 完整对比文档"></a>PostgreSQL vs MySQL: 完整对比文档</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. <strong>简介</strong></h3><p><strong>PostgreSQL</strong> 和 <strong>MySQL</strong> 是两个流行的关系型数据库管理系统（RDBMS）。它们在很多方面有相似之处，但也存在显著差异，尤其是在性能、SQL 语法、扩展性以及社区支持等方面。</p><ul><li><strong>PostgreSQL</strong>：被认为是功能最丰富的开源数据库，特别注重数据完整性、SQL 标准遵循和扩展性，支持 ACID 和复杂查询。</li><li><strong>MySQL</strong>：轻量级数据库，性能高，尤其在读取密集型应用中表现优秀，广泛用于 Web 开发。</li></ul><h3 id="2-功能对比"><a href="#2-功能对比" class="headerlink" title="2. 功能对比"></a>2. <strong>功能对比</strong></h3><h4 id="2-1-数据完整性与-ACID-支持"><a href="#2-1-数据完整性与-ACID-支持" class="headerlink" title="2.1 数据完整性与 ACID 支持"></a>2.1 <strong>数据完整性与 ACID 支持</strong></h4><ul><li><p><strong>PostgreSQL</strong>：</p><ul><li>完全遵守 ACID 原则，支持事务隔离（Serializable、Repeatable Read、Read Committed 等）。</li><li>支持外键约束、唯一性约束、触发器和存储过程。</li></ul></li><li><p><strong>MySQL</strong>：</p><ul><li>InnoDB 存储引擎支持 ACID，但其他存储引擎（如 MyISAM）不支持事务。</li><li>对于复杂事务和数据一致性的支持相对较弱。</li></ul></li></ul><h4 id="2-2-扩展性"><a href="#2-2-扩展性" class="headerlink" title="2.2 扩展性"></a>2.2 <strong>扩展性</strong></h4><ul><li><strong>PostgreSQL</strong>：具有强大的扩展性，支持自定义数据类型、函数、索引、语言等扩展。</li><li><strong>MySQL</strong>：虽然也有一些扩展机制，但总体来说不如 PostgreSQL 强大。</li></ul><h4 id="2-3-SQL-标准遵循"><a href="#2-3-SQL-标准遵循" class="headerlink" title="2.3 SQL 标准遵循"></a>2.3 <strong>SQL 标准遵循</strong></h4><ul><li><strong>PostgreSQL</strong>：严格遵守 SQL 标准，支持 SQL:2008 的大部分特性，支持复杂查询、窗口函数等。</li><li><strong>MySQL</strong>：遵循 SQL 标准较为宽松，有些 SQL 特性（如外键约束、JOIN 操作）不完全符合标准。</li></ul><h3 id="3-语法差异对比"><a href="#3-语法差异对比" class="headerlink" title="3. 语法差异对比"></a>3. <strong>语法差异对比</strong></h3><table><thead><tr><th>特性/语法</th><th>PostgreSQL</th><th>MySQL</th></tr></thead><tbody><tr><td><strong>创建数据库</strong></td><td><code>CREATE DATABASE dbname;</code></td><td><code>CREATE DATABASE dbname;</code></td></tr><tr><td><strong>创建表</strong></td><td><code>CREATE TABLE tablename (id SERIAL PRIMARY KEY, name VARCHAR(100));</code></td><td><code>CREATE TABLE tablename (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(100));</code></td></tr><tr><td><strong>序列</strong></td><td>支持 <code>SERIAL</code> 和 <code>BIGSERIAL</code> 数据类型</td><td>不支持，需使用 <code>AUTO_INCREMENT</code></td></tr><tr><td><strong>自定义数据类型</strong></td><td>支持自定义类型和复杂类型，如 JSON、数组、复合类型等</td><td>不支持自定义数据类型</td></tr><tr><td><strong>全文搜索</strong></td><td>支持 <code>tsvector</code> 和 <code>tsquery</code> 进行全文搜索</td><td>MySQL 有基本的 <code>FULLTEXT</code> 索引，但功能较简单</td></tr><tr><td><strong>窗口函数</strong></td><td>支持窗口函数（<code>ROW_NUMBER()</code>, <code>RANK()</code>, <code>LEAD()</code>, <code>LAG()</code> 等）</td><td>不支持窗口函数</td></tr><tr><td><strong>数组类型</strong></td><td>支持数组类型，例如 <code>integer[]</code>、<code>text[]</code></td><td>不支持数组类型</td></tr><tr><td><strong>JSON 支持</strong></td><td>完全支持 JSON 和 JSONB 类型</td><td>从 MySQL 5.7 开始支持 JSON 类型，但功能不如 PostgreSQL 强大</td></tr><tr><td><strong>临时表</strong></td><td>支持临时表，如 <code>CREATE TEMP TABLE</code></td><td>支持临时表，但性能和功能不如 PostgreSQL</td></tr></tbody></table><h4 id="示例：创建表和插入数据"><a href="#示例：创建表和插入数据" class="headerlink" title="示例：创建表和插入数据"></a>示例：创建表和插入数据</h4><p><strong>PostgreSQL</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">SERIAL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'John Doe'</span>, <span class="string">'john.doe@example.com'</span>);</span><br></pre></td></tr></table></figure><p><strong>MySQL</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'John Doe'</span>, <span class="string">'john.doe@example.com'</span>);</span><br></pre></td></tr></table></figure><h4 id="3-4-JOIN-操作的差异"><a href="#3-4-JOIN-操作的差异" class="headerlink" title="3.4 JOIN 操作的差异"></a>3.4 <strong>JOIN 操作的差异</strong></h4><ul><li><strong>PostgreSQL</strong>：支持更多类型的 JOIN 操作，包括 <code>FULL OUTER JOIN</code> 和 <code>RIGHT JOIN</code>，支持嵌套查询。</li><li><strong>MySQL</strong>：基本支持 <code>INNER JOIN</code>、<code>LEFT JOIN</code> 和 <code>RIGHT JOIN</code>，但 <code>FULL OUTER JOIN</code> 需要通过两个查询和联合来实现。</li></ul><h3 id="4-性能对比"><a href="#4-性能对比" class="headerlink" title="4. 性能对比"></a>4. <strong>性能对比</strong></h3><h4 id="4-1-查询优化"><a href="#4-1-查询优化" class="headerlink" title="4.1 查询优化"></a>4.1 <strong>查询优化</strong></h4><ul><li><p><strong>PostgreSQL</strong>：</p><ul><li>查询优化器更智能，支持复杂查询和子查询，能够有效使用索引进行查询优化。</li><li>具有强大的并发控制，能够处理高并发的事务操作。</li></ul></li><li><p><strong>MySQL</strong>：</p><ul><li>在简单查询（如单表查询）中性能较好，尤其在读取密集型的应用中。</li><li>对复杂查询的支持不如 PostgreSQL，尤其在 JOIN 或子查询方面。</li></ul></li></ul><h4 id="4-2-事务和锁机制"><a href="#4-2-事务和锁机制" class="headerlink" title="4.2 事务和锁机制"></a>4.2 <strong>事务和锁机制</strong></h4><ul><li><strong>PostgreSQL</strong>：采用多版本并发控制（MVCC）来处理并发事务，支持较高的并发量和事务隔离级别。</li><li><strong>MySQL</strong>：使用 InnoDB 存储引擎的 MVCC，但在某些情况下，锁的争用问题可能会影响性能。</li></ul><h4 id="4-3-性能测试示例"><a href="#4-3-性能测试示例" class="headerlink" title="4.3 性能测试示例"></a>4.3 <strong>性能测试示例</strong></h4><p>进行性能测试时，可以使用 <code>pgbench</code>（PostgreSQL 官方基准测试工具）和 <code>sysbench</code>（MySQL 基准测试工具）进行对比。</p><p><strong>PostgreSQL 性能测试</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pgbench -i -s 10 mydatabase   <span class="comment"># 初始化数据库</span></span><br><span class="line">pgbench -c 10 -j 2 -T 60 mydatabase  <span class="comment"># 启动 10 个客户端，2 个线程，测试 60 秒</span></span><br></pre></td></tr></table></figure><p><strong>MySQL 性能测试</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysbench --<span class="built_in">test</span>=oltp --oltp-table-size=1000000 --mysql-db=<span class="built_in">test</span> --mysql-user=root prepare</span><br><span class="line">sysbench --<span class="built_in">test</span>=oltp --oltp-table-size=1000000 --mysql-db=<span class="built_in">test</span> --mysql-user=root run</span><br></pre></td></tr></table></figure><p>你可以通过这两种工具测试同样的负载条件，并比较响应时间和吞吐量。</p><h3 id="5-社区和支持"><a href="#5-社区和支持" class="headerlink" title="5. 社区和支持"></a>5. <strong>社区和支持</strong></h3><ul><li><strong>PostgreSQL</strong>：拥有活跃的社区和大量的开源插件，适合需要高度自定义和复杂功能的场景。</li><li><strong>MySQL</strong>：有广泛的商业支持（例如 Oracle）和社区支持，适合大多数 Web 应用，特别是 LAMP 环境。</li></ul><h3 id="6-总结与建议"><a href="#6-总结与建议" class="headerlink" title="6. 总结与建议"></a>6. <strong>总结与建议</strong></h3><ul><li><p><strong>选择 PostgreSQL</strong>：</p><ul><li>需要复杂查询和强大数据一致性的项目。</li><li>需要扩展性或自定义数据类型的项目。</li><li>对于大数据处理、分析和事务要求高的场景，PostgreSQL 更具优势。</li></ul></li><li><p><strong>选择 MySQL</strong>：</p><ul><li>需要简单、高效的查询性能，尤其在读取密集型应用中。</li><li>项目对 SQL 标准的要求不高。</li><li>适用于 Web 开发、快速原型设计或小型到中型的应用。</li></ul></li></ul><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA线程中断两个示例</title>
      <link href="/blog/2024/07/25/JAVA%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E4%B8%A4%E4%B8%AA%E7%A4%BA%E4%BE%8B/"/>
      <url>/blog/2024/07/25/JAVA%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD%E4%B8%A4%E4%B8%AA%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h2><h3 id="1-线程中断"><a href="#1-线程中断" class="headerlink" title="1. 线程中断"></a>1. 线程中断</h3><p>线程中断是指当一个线程正在运行时，另一个线程可以调用该线程的<code>interrupt()</code>方法来中断该线程的执行。当线程被中断时，该线程会抛出一个<code>InterruptedException</code>异常，该异常可以被捕获或者处理。</p><h3 id="2-线程中断示例"><a href="#2-线程中断示例" class="headerlink" title="2. 线程中断示例"></a>2. 线程中断示例</h3><h4 id="2-1-线程中断实例1"><a href="#2-1-线程中断实例1" class="headerlink" title="2.1 线程中断实例1"></a>2.1 线程中断实例1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IgnoredInterruptionExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个ExecutorService</span></span><br><span class="line">        ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个任务，不会响应中断</span></span><br><span class="line">        Runnable task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟一个长时间运行的任务，不响应中断</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">// 执行一些工作</span></span><br><span class="line">                    System.out.println(<span class="string">"任务正在运行..."</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>); <span class="comment">// 模拟工作中的延迟</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 这里忽略中断信号</span></span><br><span class="line">                    <span class="comment">// 通常，我们应该检查 Thread.currentThread().isInterrupted() 并适当处理</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// 捕获InterruptedException，但不退出循环</span></span><br><span class="line">                System.out.println(<span class="string">"任务被中断信号捕获，但忽略它"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务并获取Future对象</span></span><br><span class="line">        Future&lt;?&gt; future = executor.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待任务完成，最多等待5秒</span></span><br><span class="line">            future.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            <span class="comment">// 超时异常</span></span><br><span class="line">            System.out.println(<span class="string">"任务超时，尝试取消..."</span>);</span><br><span class="line">            future.cancel(<span class="keyword">true</span>); <span class="comment">// 尝试取消任务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 任务执行期间发生异常</span></span><br><span class="line">            System.out.println(<span class="string">"任务执行失败: "</span> + e.getCause());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 当前线程被中断</span></span><br><span class="line">            System.out.println(<span class="string">"等待任务完成期间当前线程被中断"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"关闭ExecutorService"</span>);</span><br><span class="line">            <span class="comment">// 关闭ExecutorService</span></span><br><span class="line">            executor.shutdownNow(); <span class="comment">// 强制关闭，尝试中断所有正在执行的任务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查任务是否被成功取消</span></span><br><span class="line">        <span class="keyword">if</span> (future.isCancelled()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"任务已被取消"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"任务仍在运行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务超时，尝试取消...</span><br><span class="line">任务被中断信号捕获，但忽略它</span><br><span class="line">关闭ExecutorService</span><br><span class="line">任务已被取消</span><br></pre></td></tr></table></figure><h4 id="2-1-线程中断实例1-1"><a href="#2-1-线程中断实例1-1" class="headerlink" title="2.1 线程中断实例1"></a>2.1 线程中断实例1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UninterruptibleTaskExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个ExecutorService</span></span><br><span class="line">        ExecutorService executor = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个任务，不会响应中断</span></span><br><span class="line">        Runnable task = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 模拟一些工作，忽略中断</span></span><br><span class="line">                    System.out.println(<span class="string">"任务正在运行..."</span>);</span><br><span class="line">                    <span class="comment">// 使用较短的sleep时间以便快速输出日志</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 捕获InterruptedException但忽略它</span></span><br><span class="line">                    System.out.println(<span class="string">"任务被中断信号捕获，但忽略它"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交任务并获取Future对象</span></span><br><span class="line">        Future&lt;?&gt; future = executor.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待任务完成，最多等待5秒</span></span><br><span class="line">            future.get(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            <span class="comment">// 超时异常</span></span><br><span class="line">            System.out.println(<span class="string">"任务超时，尝试取消..."</span>);</span><br><span class="line">            future.cancel(<span class="keyword">true</span>); <span class="comment">// 尝试取消任务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// 任务执行期间发生异常</span></span><br><span class="line">            System.out.println(<span class="string">"任务执行失败: "</span> + e.getCause());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 当前线程被中断</span></span><br><span class="line">            System.out.println(<span class="string">"等待任务完成期间当前线程被中断"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"关闭ExecutorService"</span>);</span><br><span class="line">            <span class="comment">// 关闭ExecutorService</span></span><br><span class="line">            executor.shutdownNow(); <span class="comment">// 强制关闭，尝试中断所有正在执行的任务</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查任务是否被成功取消</span></span><br><span class="line">        <span class="keyword">if</span> (future.isCancelled()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"任务已被取消"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"任务仍在运行"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查任务是否仍在运行</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 主线程等待一段时间以观察任务是否仍在运行</span></span><br><span class="line">            Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务超时，尝试取消...</span><br><span class="line">任务被中断信号捕获，但忽略它</span><br><span class="line">任务正在运行...</span><br><span class="line">关闭ExecutorService</span><br><span class="line">任务被中断信号捕获，但忽略它</span><br><span class="line">任务正在运行...</span><br><span class="line">任务已被取消</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br><span class="line">任务正在运行...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Graylog源码解析(2)-告警模块详解</title>
      <link href="/blog/2023/08/13/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-2-%E5%91%8A%E8%AD%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2023/08/13/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-2-%E5%91%8A%E8%AD%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA SPI机制详解</title>
      <link href="/blog/2023/03/13/JAVA-SPI%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2023/03/13/JAVA-SPI%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Java-SPI"><a href="#什么是Java-SPI" class="headerlink" title="什么是Java SPI"></a>什么是Java SPI</h2><p>SPI（Service Provider Interface）机制是Java提供的一种服务发现机制，它允许第三方为某个接口创建实现，并将实现放在classpath下的META-INF/services目录中，由接口的提供方在运行时动态加载实现。</p><a id="more"></a><p>SPI机制的实现步骤如下：</p><ol><li><p>定义接口：首先需要定义一个接口，该接口的实现类将会被动态加载。</p></li><li><p>创建实现类：然后需要创建实现该接口的类，该类需要实现该接口的所有方法。</p></li><li><p>创建服务配置文件：在resources目录下创建/META-INF/services/接口全限定名的文件，文件中填写实现类的全限定名。</p></li><li><p>加载实现类：在运行时，通过ServiceLoader.load(接口类型)方法加载实现类。</p></li><li><p>调用实现类：通过迭代器遍历获取到的实现类，调用实现类的方法。</p></li></ol><p>示例代码如下：</p><ol><li>定义服务接口</li></ol><p>首先需要定义一个服务接口，该接口定义了一组服务接口方法，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建服务提供者</p><p>接下来需要创建一个或多个服务提供者，实现上述服务接口，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceImpl1</span> <span class="keyword">implements</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyServiceImpl1 doSomething"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServiceImpl2</span> <span class="keyword">implements</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyServiceImpl2 doSomething"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建服务提供者配置文件</p><p>在classpath下创建一个名为 <code>META-INF/services</code> 的目录，在该目录下创建一个以服务接口全限定名为文件名的文件，例如：<code>META-INF/services/com.example.MyService</code>，文件内容为服务提供者的全限定名，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.example.MyServiceImpl1</span><br><span class="line">com.example.MyServiceImpl2</span><br></pre></td></tr></table></figure><p>4.加载服务提供者</p><p>使用 <code>ServiceLoader</code> 类加载服务提供者，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServiceLoader&lt;MyService&gt; loader = ServiceLoader.load(MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><p>5.使用服务提供者</p><p>使用 <code>ServiceLoader</code> 类的 <code>iterator()</code> 方法获取服务提供者的迭代器，然后遍历迭代器获取服务提供者的实例，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (MyService myService : loader) &#123;</span><br><span class="line">    myService.doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会依次输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyServiceImpl1 doSomething</span><br><span class="line">MyServiceImpl2 doSomething</span><br></pre></td></tr></table></figure><p>说明两个服务提供者都被成功加载并执行。</p><p>需要注意的是，SPI机制要求服务接口和服务提供者实现类都必须是公共的，并且服务提供者的实现类必须有一个无参构造函数。</p><h2 id="JDK中的SPI使用"><a href="#JDK中的SPI使用" class="headerlink" title="JDK中的SPI使用"></a>JDK中的SPI使用</h2><p>JDK中有很多地方使用了SPI，以下是一些例子：</p><ol><li><p>JDBC驱动：JDBC规范定义了一种SPI机制，允许开发人员编写自己的JDBC驱动程序。JDBC驱动程序必须实现java.sql.Driver接口，同时还需要在META-INF/services目录下提供一个名为java.sql.Driver的文件，文件内容为该驱动程序的实现类名。</p></li><li><p>日志框架：JDK自带的日志框架java.util.logging也使用了SPI机制。开发人员可以通过实现java.util.logging.Handler接口来自定义日志输出方式，然后在META-INF/services目录下提供一个名为java.util.logging.Handler的文件，文件内容为该自定义Handler的实现类名。</p></li><li><p>XML解析器：JDK自带的XML解析器javax.xml.parsers.DocumentBuilderFactory也使用了SPI机制。开发人员可以通过实现javax.xml.parsers.DocumentBuilderFactory接口来自定义XML解析器，然后在META-INF/services目录下提供一个名为javax.xml.parsers.DocumentBuilderFactory的文件，文件内容为该自定义解析器的实现类名。</p></li><li><p>Servlet容器：Servlet规范也定义了一种SPI机制，允许开发人员编写自己的Servlet容器。开发人员可以通过实现javax.servlet.ServletContainerInitializer接口来自定义Servlet容器，然后在META-INF/services目录下提供一个名为javax.servlet.ServletContainerInitializer的文件，文件内容为该自定义容器的实现类名。</p></li><li><p>Java NIO中的SelectorProvider：SelectorProvider是一个抽象类，用于提供Selector的实现。在Java NIO中，可以通过SelectorProvider.provider()方法获取系统默认的SelectorProvider实例。不同的操作系统平台会提供不同的SelectorProvider实现，因此SelectorProvider的具体实现类是通过SPI机制加载的。</p></li></ol><h2 id="JAVA-SPI的底层实现原理"><a href="#JAVA-SPI的底层实现原理" class="headerlink" title="JAVA SPI的底层实现原理"></a>JAVA SPI的底层实现原理</h2><p>在JDK中，Java SPI的实现方式主要是通过<code>ServiceLoader</code>类实现的。它是一个用于加载服务实现类的工具类，它的实现方式主要包括以下几个方面：</p><ol><li><p>根据接口名称从META-INF/services目录下加载配置文件。</p></li><li><p>解析配置文件，获取实现类的全限定名。</p></li><li><p>使用反射机制创建实现类的实例。</p></li><li><p>将实例缓存起来，避免重复创建。</p></li></ol><p>下面我们来详细介绍一下这个实现方式：</p><ol><li>根据接口名称从META-INF/services目录下加载配置文件。</li></ol><p>在Java SPI机制中，每个服务提供者都必须提供一个配置文件，该配置文件的名称为“接口全限定名”，位于META-INF/services目录下。例如，如果我们要使用JDBC的Driver接口，那么对应的配置文件就是META-INF/services/java.sql.Driver。</p><p>2.解析配置文件，获取实现类的全限定名。</p><p>在解析配置文件时，ServiceLoader类会读取该文件的每一行，每行内容为一个实现类的全限定名。例如，如果我们要使用JDBC的Driver接口，那么对应的配置文件内容可能如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br><span class="line">org.postgresql.Driver</span><br></pre></td></tr></table></figure><p>3.使用反射机制创建实现类的实例。</p><p>在获取到实现类的全限定名后，ServiceLoader类会使用反射机制创建该实现类的实例。</p><p>4.将实例缓存起来，避免重复创建。</p><p>为了避免重复创建实例，ServiceLoader类会将创建的实例缓存起来，下次再需要该实例时，直接返回缓存中的实例。</p><p>总的来说，Java SPI机制的实现方式比较简单，主要是通过配置文件和反射机制来实现的。它的优点是可以动态替换实现类，缺点是无法对实现类进行版本管理。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Google Guice和Spring的使用和异同点</title>
      <link href="/blog/2023/03/13/Google-Guice%E5%92%8CSpring%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%BC%82%E5%90%8C%E7%82%B9/"/>
      <url>/blog/2023/03/13/Google-Guice%E5%92%8CSpring%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%BC%82%E5%90%8C%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Guice介绍"><a href="#Google-Guice介绍" class="headerlink" title="Google Guice介绍"></a>Google Guice介绍</h2><p>Google Guice 是一个开源的依赖注入框架，它能够帮助开发者更方便地管理应用程序中的对象依赖关系，从而使得代码更加易于测试、维护和扩展。</p><a id="more"></a><p>Guice 的核心概念包括：</p><ol><li><p>绑定：将接口或抽象类与其具体实现绑定在一起。这可以通过使用 bind() 方法来完成。</p></li><li><p>提供者：提供所需对象实例的方式。这可以通过使用 Provider 接口或 @Provides 注解来完成。</p></li><li><p>作用域：指定对象的创建和销毁方式。Guice 支持多种作用域，例如单例模式、线程本地变量等。</p></li></ol><p>除此之外，Guice 还提供了其他一些特性，例如 AOP、动态代理等。</p><p>以下是一个使用 Guice 实现依赖注入的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Service executed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Service service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bind(Service<span class="class">.<span class="keyword">class</span>).<span class="title">to</span>(<span class="title">ServiceImpl</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Injector injector = Guice.createInjector(<span class="keyword">new</span> AppModule());</span><br><span class="line">        Client client = injector.getInstance(Client<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        client.run(); <span class="comment">// Output: Service executed.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中，Client 类需要依赖一个 Service 对象，但并没有直接实例化该对象，而是通过 @Inject 注解来表示该对象需要通过依赖注入获取。AppModule 类则定义了一个绑定关系，将 Service 接口与 ServiceImpl 实现类绑定在一起。Main 类则创建了一个 Guice 实例，并通过 getInstance() 方法获取 Client 类的实例对象，从而触发了依赖注入的过程。最后执行 client.run() 方法时，输出了 “Service executed.” 字符串。</p><hr><h2 id="Google-Guice和Spring区别"><a href="#Google-Guice和Spring区别" class="headerlink" title="Google Guice和Spring区别"></a>Google Guice和Spring区别</h2><p>Google Guice 和 Spring 都是依赖注入框架，它们的主要区别如下：</p><ol><li><p>项目规模和复杂度：Spring 是一款大而全的企业级框架，提供了诸多功能和组件，可用于开发大型、复杂的应用程序。而 Guice 则相对较小巧，更适合于中小规模的项目。</p></li><li><p>配置方式：Spring 采用基于 XML 或注解的配置方式，可通过配置文件或注解来完成对象的创建和管理；而 Guice 则采用基于 Java 代码的配置方式，不需要额外的配置文件。</p></li><li><p>AOP 支持：Spring 提供了完整的 AOP 支持，并且支持多种 AOP 实现方式，例如基于 JDK 动态代理和 CGLIB 的动态代理等；而 Guice 则只提供了简单的 AOP 支持，使用起来相对比较麻烦。</p></li><li><p>社区生态：由于 Spring 的知名度和广泛应用，其社区生态非常庞大，有大量的插件和扩展库可供使用和参考；而 Guice 的社区相对较小，可选资源相对较少。</p></li><li><p>性能：Guice 比 Spring 更轻量级，启动速度更快，执行效率更高。</p></li></ol><p>总之，如果您需要一个全面的企业级框架来支撑大型、复杂的应用程序，则 Spring 是更好的选择；如果您的项目规模相对较小，或者您喜欢更加简洁、高效的代码，那么 Guice 可能更适合您。</p><hr><h2 id="Spring-的-XML-配置文件或注解来完成对象的创建和管理示例"><a href="#Spring-的-XML-配置文件或注解来完成对象的创建和管理示例" class="headerlink" title="Spring 的 XML 配置文件或注解来完成对象的创建和管理示例"></a>Spring 的 XML 配置文件或注解来完成对象的创建和管理示例</h2><p>我们可以使用 Spring 的 XML 配置文件或注解来完成对象的创建和管理。以下是两个简单的示例：</p><ol><li>基于 XML 的配置方式<br>定义一个 Person 类和一个 PersonService 类，其中 PersonService 依赖于 Person 对象：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">getPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, "</span> + person.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring 的 XML 配置文件中，我们可以将这两个类进行如下的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.example.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Alice"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"personService"</span> <span class="attr">class</span>=<span class="string">"com.example.PersonService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"person"</span> <span class="attr">ref</span>=<span class="string">"person"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个配置文件中，我们首先配置了一个<code>Person</code>对象，指定其 name 属性为 “Alice”。接着配置了一个 PersonService 对象，并将其依赖的 Person 对象注入到 person 属性中。</p><p>现在，我们可以通过获取 personService bean 来使用 PersonService 对象，并调用其 sayHello() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">PersonService service = (PersonService)context.getBean(<span class="string">"personService"</span>);</span><br><span class="line">service.sayHello(); <span class="comment">// Output: Hello, Alice</span></span><br></pre></td></tr></table></figure><p>2.基于注解的配置方式<br>在 Spring 中，我们也可以使用注解来完成对象的创建和管理。我们可以使用 @Component 注解来标记一个类为 Spring 的组件，使用 @Autowired 或 @Resource 注解来自动注入依赖的对象。</p><p>例如，我们可以将上面的 Person 和 PersonService 类改造成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello, "</span> + person.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们将 Person 和 PersonService 类都标记为 Spring 组件，并使用 @Autowired 注解将 person 属性注入到 PersonService 中。</p><p>现在，我们可以直接获取 PersonService 实例，并调用其 sayHello() 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">PersonService service = context.getBean(PersonService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">service.sayHello(); <span class="comment">// Output: Hello, Alice</span></span><br></pre></td></tr></table></figure><p>注意，这里我们需要定义一个 AppConfig 类，用于将 Person 和 PersonService 类注册到 Spring 容器中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.example"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration 注解表示该类是一个 Spring 配置类，@ComponentScan 注解用于扫描指定包下的所有组件，并将其注册到 Spring 容器中。</p><hr><h2 id="Guice代码配置方式"><a href="#Guice代码配置方式" class="headerlink" title="Guice代码配置方式"></a>Guice代码配置方式</h2><p>Guice采用基于Java代码的配置方式，可以通过编写Java代码来配置依赖关系。以下是一个使用Guice的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppModule</span> <span class="keyword">extends</span> <span class="title">AbstractModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bind(MyService<span class="class">.<span class="keyword">class</span>).<span class="title">to</span>(<span class="title">MyServiceImpl</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        bind(MyDao<span class="class">.<span class="keyword">class</span>).<span class="title">to</span>(<span class="title">MyDaoImpl</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Injector injector = Guice.createInjector(<span class="keyword">new</span> MyAppModule());</span><br><span class="line">        MyService myService = injector.getInstance(MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        myService.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了一个MyAppModule来配置依赖关系。我们使用bind()方法将MyService接口绑定到MyServiceImpl实现类，将MyDao接口绑定到MyDaoImpl实现类。然后，在MyApp中，我们通过创建一个Injector对象，并将MyAppModule传递给它来获取MyService的实例，并调用它的doSomething()方法。<br>使用Guice的优点是，它可以帮助我们自动处理依赖关系，从而简化代码并提高可维护性。此外，使用Java代码配置依赖关系也使得我们可以更好地利用IDE的自动补全和重构功能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式:工厂模式</title>
      <link href="/blog/2023/03/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2023/03/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>工厂模式通常分为三类：简单工厂模式、工厂方法模式和抽象工厂模式。</p><a id="more"></a><p>Java工厂模式是一种创建型设计模式，它提供了一种通过调用工厂方法来创建对象的方式，而不是直接实例化对象。这个工厂方法通常被定义在一个接口或抽象类中，并由具体的子类来实现。</p><p>在Java中，有三种常见的工厂模式：</p><ol><li><p>简单工厂模式：由一个工厂类根据传入的参数，决定创建哪种产品类的实例对象。</p></li><li><p>工厂方法模式：定义一个抽象的工厂接口，由具体的工厂类去实现该接口，并分别创建对应的产品对象。</p></li><li><p>抽象工厂模式：工厂类实现一个抽象工厂接口，该接口声明用于创建一系列相关或相互依赖的对象，而无需指定其具体类。</p></li></ol><p>工厂模式的主要优点包括：</p><ol><li><p>降低了客户端和代码的耦合性。</p></li><li><p>更容易扩展和维护代码。</p></li><li><p>可以隐藏对象创建的具体细节，使得代码更加简洁和易于理解。</p></li></ol><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteProductA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConcreteProductB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title">createProduct</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"A"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"B"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProductB();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown product type: "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product productA = SimpleFactory.createProduct(<span class="string">"A"</span>);</span><br><span class="line">        productA.method(); <span class="comment">// Output: ConcreteProductA</span></span><br><span class="line">        </span><br><span class="line">        Product productB = SimpleFactory.createProduct(<span class="string">"B"</span>);</span><br><span class="line">        productB.method(); <span class="comment">// Output: ConcreteProductB</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中，SimpleFactory 作为工厂类，根据传入的参数决定创建 ConcreteProductA 或 ConcreteProductB 对象并返回。Client 类则通过调用 SimpleFactory.createProduct() 方法来创建所需的产品对象。</p><p>优点： 简单工厂模式可以根据需求，动态生成使用者所需类的对象，而使用者不用去知道怎么创建对象，使得各个模块各司其职，降低了系统的耦合性。</p><p>缺点： 扩展性差，违背了开闭原则（开闭原则指的是：软件实现应该对扩展开放，对修改关闭）。新增产品时，需要修改工厂类。</p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Drawing circle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Drawing rectangle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Drawing triangle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">createShape</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"circle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"rectangle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"triangle"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Triangle();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShapeFactory factory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">        Shape circle = factory.createShape(<span class="string">"circle"</span>);</span><br><span class="line">        circle.draw();</span><br><span class="line">        Shape rectangle = factory.createShape(<span class="string">"rectangle"</span>);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">        Shape triangle = factory.createShape(<span class="string">"triangle"</span>);</span><br><span class="line">        triangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点： 扩展性好，符合了开闭原则，新增一种产品时，只需增加改对应的产品类和对应的工厂子类即可。比如样例实现中，当我们需要一个苹果电脑时，只需要去新增一个苹果电脑类和一个苹果工厂类即可，而无需去修改原有的代码。符合单一职责原则，每个工厂只负责一种产品，而不是由一个工厂去生成所有商品。</p><p>缺点： 当我们新增产品时，还需要提供对应的工厂类，系统中类的个数将会成倍增加，相当于增加了系统的复杂性。</p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式是一种创建型设计模式，它允许客户端代码创建一组相关的对象，而无需指定其具体类。它提供了一种将工厂和产品族的概念组合在一起的方式。</p><p>一个经典的例子是创建不同操作系统的 GUI 工具包。假设我们需要创建一个 GUI 工具包，它可以在 Windows 和 Mac OS 上运行。我们可以使用抽象工厂模式来创建这个工具包。</p><p>首先，我们定义一个抽象工厂接口，该接口定义了创建不同操作系统下的 GUI 控件的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Button <span class="title">createButton</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Checkbox <span class="title">createCheckbox</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建具体的工厂类来实现这个接口，分别用于创建 Windows 和 Mac OS 下的 GUI 控件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WindowsCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacGUIFactory</span> <span class="keyword">implements</span> <span class="title">GUIFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Button <span class="title">createButton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacButton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Checkbox <span class="title">createCheckbox</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MacCheckbox();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义 GUI 控件的抽象类和具体类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Windows button painted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCheckbox</span> <span class="keyword">implements</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Windows checkbox painted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacButton</span> <span class="keyword">implements</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mac button painted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacCheckbox</span> <span class="keyword">implements</span> <span class="title">Checkbox</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Mac checkbox painted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以使用这些类来创建不同操作系统下的 GUI 工具包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GUIFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a Windows GUI toolkit</span></span><br><span class="line">factory = <span class="keyword">new</span> WindowsGUIFactory();</span><br><span class="line">Button windowsButton = factory.createButton();</span><br><span class="line">Checkbox windowsCheckbox = factory.createCheckbox();</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a Mac OS GUI toolkit</span></span><br><span class="line">factory = <span class="keyword">new</span> MacGUIFactory();</span><br><span class="line">Button macButton = factory.createButton();</span><br><span class="line">Checkbox macCheckbox = factory.createCheckbox();</span><br></pre></td></tr></table></figure><p>通过使用抽象工厂模式，我们可以轻松地创建不同操作系统下的 GUI 工具包，而无需关心具体的实现细节。这使得我们的代码更加模块化和可扩展。</p><p>优点： 工厂抽象类创建了多个类型的产品，当有需求时，可以创建相关产品子类和子工厂类来获取。个人理解是除了产品维度进行了抽象，还从工厂层面进行了功能特性抽象，进行交织的产品维度。</p><p>缺点： 扩展新种类产品时困难。抽象工厂模式需要我们在工厂抽象类中提前确定了可能需要的产品种类，以满足不同品牌的多种产品的需求。但是如果我们需要的产品种类并没有在工厂抽象类中提前确定，那我们就需要去修改工厂抽象类了，而一旦修改了工厂抽象类，那么所有的工厂子类也需要修改，这样显然扩展不方便。</p><h2 id="JDK中的工厂方法"><a href="#JDK中的工厂方法" class="headerlink" title="JDK中的工厂方法"></a>JDK中的工厂方法</h2><p>在JDK中，工厂模式被广泛应用，以下是一些例子：</p><ol><li><p>Calendar类中的getInstance()方法：该方法返回一个Calendar对象，但是具体返回的是哪个子类的对象，取决于当前的Locale和TimeZone。</p></li><li><p>NumberFormat类中的getInstance()方法：该方法返回一个NumberFormat对象，但是具体返回的是哪个子类的对象，取决于当前的Locale。</p></li><li><p>ResourceBundle类中的getBundle()方法：该方法返回一个ResourceBundle对象，但是具体返回的是哪个子类的对象，取决于指定的资源包类型和Locale。</p></li><li><p>JDBC中的DriverManager类中的getDriver()方法：该方法返回一个Driver对象，但是具体返回的是哪个子类的对象，取决于当前的数据库驱动。</p></li><li><p>DateFormat类中的getInstance()方法：该方法返回一个DateFormat对象，但是具体返回的是哪个子类的对象，取决于当前的Locale。</p></li></ol><p>这些例子都展示了工厂模式的特点：隐藏对象的创建细节，根据条件动态地创建对象。</p><p>在JDK中，工厂模式的实现主要有以下几种：</p><ol><li>SimpleDateFormat类</li></ol><p>SimpleDateFormat类是Java中的一个日期格式化类，它使用工厂方法模式来创建日期格式化对象。具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormat</span> <span class="keyword">extends</span> <span class="title">DateFormat</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleDateFormat <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.Calendar类</p><p>Calendar类是Java中用于处理日期和时间的类，它也使用了工厂方法模式来创建Calendar对象。具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Calendar</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span>, <span class="title">Comparable</span>&lt;<span class="title">Calendar</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Calendar <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createCalendar(TimeZone.getDefault(), Locale.getDefault(Locale.Category.FORMAT));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.NumberFormat类</p><p>NumberFormat类是Java中用于格式化数字的类，它也使用了工厂方法模式来创建NumberFormat对象。具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberFormat</span> <span class="keyword">extends</span> <span class="title">Format</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NumberFormat <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance(Locale.getDefault(Locale.Category.FORMAT), NUMBERSTYLE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些类的实现中，都使用了静态工厂方法来创建对象，这些工厂方法通常都是public static的方法，返回类型为自身类或其子类的实例。通过这种方式，可以隐藏对象的创建细节，使得客户端代码只需要知道如何获取对象，而不需要知道对象的创建过程。这样可以提高代码的可维护性和灵活性。</p><h3 id="JDBC中的工厂方法"><a href="#JDBC中的工厂方法" class="headerlink" title="JDBC中的工厂方法"></a>JDBC中的工厂方法</h3><p>在JDBC中，DriverManager是一个工厂类，用于管理数据库驱动程序。当应用程序需要连接到数据库时，它通过DriverManager获取一个数据库连接。DriverManager类中的getDriver()方法用于获取一个数据库驱动程序的实例，具体返回哪个子类的对象，取决于当前的数据库驱动。</p><p>在JDBC中，每个数据库厂商都提供了自己的驱动程序实现，这些驱动程序都实现了java.sql.Driver接口。当应用程序调用DriverManager的getDriver()方法时，DriverManager会根据当前的数据库类型，从已经注册的驱动程序列表中查找对应的驱动程序实现，并返回一个Driver对象。</p><p>在驱动程序的实现中，通常会在静态代码块中调用DriverManager的registerDriver()方法，将自己注册到DriverManager中。这样，当应用程序调用DriverManager的getDriver()方法时，就可以找到对应的驱动程序实现了。</p><p>例如，如果应用程序要连接MySQL数据库，就需要使用MySQL提供的驱动程序实现。在应用程序中，可以通过以下代码获取MySQL驱动程序的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">Driver driver = DriverManager.getDriver(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br></pre></td></tr></table></figure><p>在上面的代码中，Class.forName()方法用于加载MySQL驱动程序的实现类，然后调用DriverManager的getDriver()方法获取一个MySQL驱动程序的实例。此时，返回的Driver对象就是MySQL驱动程序的一个实例。</p><p>总之，JDBC中的DriverManager类中的getDriver()方法通过工厂模式，根据当前的数据库类型，从已经注册的驱动程序列表中查找对应的驱动程序实现，并返回一个Driver对象。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graylog源码解析(1)-任务调度模块详解</title>
      <link href="/blog/2023/03/06/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2023/03/06/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>告警模块是SIEM产品中重要的模块，下文将在源码层面解析在Graylog中实现此模块的任务调度模块的实现细节。</p><a id="more"></a><p>1、Graylog系统中的任务均实现于Job接口，此接口如下，包含一个工厂方法模式接口和任务执行动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by job classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">TYPE</span> <span class="keyword">extends</span> <span class="title">Job</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">TYPE <span class="title">create</span><span class="params">(JobDefinitionDto jobDefinition)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called by the scheduler when a trigger fires to execute the job. It returns a &#123;<span class="doctag">@link</span> JobTriggerUpdate&#125; that</span></span><br><span class="line"><span class="comment">     * instructs the scheduler about the next trigger execution time, trigger data and others.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx the job execution context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the trigger update</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException if the job execution fails</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">JobTriggerUpdate <span class="title">execute</span><span class="params">(JobExecutionContext ctx)</span> <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、核心调度服务JobSchedulerService实现于Guava AbstractExecutionThreadService。</p><p>注：Guava包里的Service用于封装一个服务对象的运行状态、包括start和stop等方法。例如web服务器，RPC服务器、计时器等可以实现这个接口。对此类服务的状态管理并不轻松、需要对服务的开启/关闭进行妥善管理、特别是在多线程环境下尤为复杂。Guava 包提供了一些基础类帮助你管理复杂的状态转换逻辑和同步细节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Safety measure to make sure everything is started before we start job scheduling.</span></span><br><span class="line">    LOG.debug(<span class="string">"Waiting for server to enter RUNNING status before starting the scheduler loop"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等待服务运行</span></span><br><span class="line">        serverStatus.awaitRunning();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        LOG.debug(<span class="string">"Was interrupted while waiting for server to enter RUNNING state. Aborting."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.debug(<span class="string">"Server entered RUNNING state, starting scheduler loop"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> executionEnabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 死循环判断当前service的运行状态</span></span><br><span class="line">    <span class="keyword">while</span> (isRunning()) &#123;</span><br><span class="line">        <span class="comment">// 配置文件进行配置是否允不同节点进行执行</span></span><br><span class="line">        <span class="keyword">if</span> (!schedulerConfig.canExecute()) &#123;</span><br><span class="line">            <span class="comment">// 仅在canExecute()状态转变后进行日志提示输出</span></span><br><span class="line">            executionEnabled = logExecutionConfigState(executionEnabled, <span class="keyword">false</span>);</span><br><span class="line">            clock.sleepUninterruptibly(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        executionEnabled = logExecutionConfigState(executionEnabled, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        LOG.debug(<span class="string">"Starting scheduler loop iteration"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 核心调度方法</span></span><br><span class="line">            <span class="comment">// jobExecutionEngine.execute()此方法是多个节点能否分布式执行任务的关键实现，开源版本Graylog默认只有主节点能执行任务，</span></span><br><span class="line">            <span class="comment">// 如果自己想基于开源版本实现分布式执行任务，需要修改此方法的实现。</span></span><br><span class="line">            <span class="keyword">if</span> (!jobExecutionEngine.execute() &amp;&amp; isRunning()) &#123;</span><br><span class="line">                <span class="comment">// When the execution engine returned false, there are either no free worker threads or no</span></span><br><span class="line">                <span class="comment">// runnable triggers. To avoid busy spinning we sleep for the configured duration or until</span></span><br><span class="line">                <span class="comment">// we receive a job completion event via the scheduler event bus.</span></span><br><span class="line">                <span class="comment">// 没有工作线程可用时，进行睡眠，避免busy spinning，CPU空转，造成CPU资源极大浪费。</span></span><br><span class="line">                <span class="keyword">if</span> (sleeper.sleep(loopSleepDuration.getQuantity(), loopSleepDuration.getUnit())) &#123;</span><br><span class="line">                    LOG.debug(<span class="string">"Waited for &#123;&#125; &#123;&#125; because there are either no free worker threads or no runnable triggers"</span>,</span><br><span class="line">                                loopSleepDuration.getQuantity(), loopSleepDuration.getUnit());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Received interrupted exception"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Error running job execution engine"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.debug(<span class="string">"Ending scheduler loop iteration"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Busy spinning是一种CPU密集型的等待机制，也称为忙等待。当程序需要等待某个条件满足时，它会在循环中反复检查这个条件是否已经满足，如果没有满足就一直循环下去，直到条件满足才继续执行后续操作。</span><br><span class="line"></span><br><span class="line">这种等待方式可以避免进程切换和上下文切换的开销，因为它只使用CPU资源而不会进入睡眠状态，因此可以更快地响应事件。但是，它也会占用大量的CPU时间，降低了CPU利用率，可能会影响其他程序的性能和系统的稳定性，尤其在高并发环境下容易造成资源争用，因此需要谨慎使用。</span><br><span class="line"></span><br><span class="line">在实际应用中，busy spinning通常用于短暂等待的场景，例如自旋锁、轮询等，在长时间等待的场景下则不适合使用，应该选择其他的等待方式，如阻塞、休眠等。</span><br></pre></td></tr></table></figure><p>可中断睡眠器，在不中断线程的情况下模拟睡眠，可灵活控制睡眠时间和唤醒时机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This class provides a sleep method that can be interrupted without interrupting threads.</span></span><br><span class="line"><span class="comment">     * The same could be achieved by using a &#123;<span class="doctag">@link</span> CountDownLatch&#125; but that one cannot be reused and we would need</span></span><br><span class="line"><span class="comment">     * to create new latch objects all the time. This implementation is using a &#123;<span class="doctag">@link</span> Semaphore&#125; internally which</span></span><br><span class="line"><span class="comment">     * can be reused.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptibleSleeper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">        InterruptibleSleeper() &#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">new</span> Semaphore(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@VisibleForTesting</span></span><br><span class="line">        InterruptibleSleeper(Semaphore semaphore) &#123;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Blocks for the given duration or until interrupted via &#123;<span class="doctag">@link</span> #interrupt()&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> duration the duration to sleep</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit     the duration unit</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if slept for the given duration, false if interrupted</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException if the thread gets interrupted</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> duration, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// First we have to drain all available permits because interrupt() might get called very often and thus</span></span><br><span class="line">            <span class="comment">// there might be a lot of permits.</span></span><br><span class="line">            semaphore.drainPermits();</span><br><span class="line">            <span class="comment">// Now try to acquire a permit. This won't work except #interrupt() got called in the meantime.</span></span><br><span class="line">            <span class="comment">// It waits for the given duration, basically emulating a sleep.</span></span><br><span class="line">            <span class="keyword">return</span> !semaphore.tryAcquire(duration, unit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Interrupt a &#123;<span class="doctag">@link</span> #sleep(long, TimeUnit)&#125; call so it unblocks.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Attention: this will increase available permits every time it's called.</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、JobExecutionEngine执行引擎检查可运行的触发器，并在给定的工作线程池中启动作业执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the engine. This will try to lock a trigger and execute the job if there are free slots in the</span></span><br><span class="line"><span class="comment">     * worker pool and the engine is not shutting down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if a job trigger has been locked and the related job has been triggered, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Cleanup stale scheduler state *before* processing any triggers for the first time.</span></span><br><span class="line">        <span class="comment">// This is a no-op after the first invocation.</span></span><br><span class="line">        <span class="comment">// 每次启动之前，会修改当前节点在数据库中的处于running状态的触发器状态，使其置于runnable状态。</span></span><br><span class="line">        <span class="keyword">if</span> (shouldCleanup.get()) &#123;</span><br><span class="line">            cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We want to avoid a call to the database if there are no free slots in the pool or the engine is shutting down</span></span><br><span class="line">        <span class="comment">// 判断执行条件</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning.get() &amp;&amp; workerPool.hasFreeSlots()) &#123;</span><br><span class="line">            <span class="comment">// 按照FIELD_NEXT_TIME顺序，获取未被上锁或已上锁但锁超过5min超时时间(默认)的触发器。</span></span><br><span class="line">            <span class="keyword">final</span> Optional&lt;JobTriggerDto&gt; triggerOptional = jobTriggerService.nextRunnableTrigger();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (triggerOptional.isPresent()) &#123;</span><br><span class="line">                <span class="keyword">final</span> JobTriggerDto trigger = triggerOptional.get();</span><br><span class="line">                <span class="comment">// 线程池执行触发器任务</span></span><br><span class="line">                <span class="keyword">if</span> (!workerPool.execute(() -&gt; handleTrigger(trigger))) &#123;</span><br><span class="line">                    <span class="comment">// The job couldn't be executed so we have to release the trigger again with the same nextTime</span></span><br><span class="line">                    <span class="comment">// 此触发器无法执行时，更新状态为RUNNABLE，且nextTime不变，把触发器释放。</span></span><br><span class="line">                    jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(trigger.nextTime()));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>handleTrigger(JobTriggerDto trigger)</code>执行触发器，获取trigger、obDefinition、job这些需要执行的方法和参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTrigger</span><span class="params">(JobTriggerDto trigger)</span> </span>&#123;</span><br><span class="line">        LOG.trace(<span class="string">"Locked trigger &#123;&#125; (owner=&#123;&#125;)"</span>, trigger.id(), trigger.lock().owner());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> JobDefinitionDto jobDefinition = jobDefinitionService.get(trigger.jobDefinitionId())</span><br><span class="line">                    .orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">"Couldn't find job definition "</span> + trigger.jobDefinitionId()));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Job job = jobFactory.get(jobDefinition.config().type()).create(jobDefinition);</span><br><span class="line">            <span class="keyword">if</span> (job == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Couldn't find job factory for type "</span> + jobDefinition.config().type());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            executionTime.time(() -&gt; executeJob(trigger, jobDefinition, job));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="comment">// The trigger cannot be handled because of a permanent error so we mark the trigger as defective</span></span><br><span class="line">            LOG.error(<span class="string">"Couldn't handle trigger due to a permanent error &#123;&#125; - trigger won't be retried"</span>, trigger.id(), e);</span><br><span class="line">            jobTriggerService.setTriggerError(trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// The trigger cannot be handled because of an unknown error, retry in a few seconds</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Check if we need to implement a max-retry after which the trigger is set to ERROR</span></span><br><span class="line">            <span class="keyword">final</span> DateTime nextTime = DateTime.now(DateTimeZone.UTC).plusSeconds(<span class="number">5</span>);</span><br><span class="line">            LOG.error(<span class="string">"Couldn't handle trigger &#123;&#125; - retrying at &#123;&#125;"</span>, trigger.id(), nextTime, e);</span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(nextTime));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 任务执行结束，有可执行资源，调用InterruptibleSleeper.interrupt()方法，中断JobSchedulerService的睡眠，让其继续执行。</span></span><br><span class="line">            eventBus.post(JobCompletedEvent.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终的Job执行的方法，源码增加了些指标监控注解和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WithSpan</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeJob</span><span class="params">(JobTriggerDto trigger, JobDefinitionDto jobDefinition, Job job)</span> </span>&#123;</span><br><span class="line">        Span.current().setAttribute(SCHEDULER_JOB_CLASS, job.getClass().getSimpleName())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_TYPE, jobDefinition.config().type())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_TITLE, jobDefinition.title())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_ID, Strings.valueOf(jobDefinition.id()));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"Execute job: &#123;&#125;/&#123;&#125;/&#123;&#125; (job-class=&#123;&#125; trigger=&#123;&#125; config=&#123;&#125;)"</span>, jobDefinition.title(), jobDefinition.id(),</span><br><span class="line">                        jobDefinition.config().type(), job.getClass().getSimpleName(), trigger.id(), jobDefinition.config());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用Job接口执行方法，执行不同类型的Job实现类的方法。</span></span><br><span class="line">            <span class="keyword">final</span> JobTriggerUpdate triggerUpdate = job.execute(JobExecutionContext.create(trigger, jobDefinition, jobTriggerUpdatesFactory.create(trigger), isRunning, jobTriggerService));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (triggerUpdate == <span class="keyword">null</span>) &#123;</span><br><span class="line">                executionFailed.inc();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Job#execute() must not return null - this is a bug in the job class"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            executionSuccessful.inc();</span><br><span class="line"></span><br><span class="line">            LOG.trace(<span class="string">"Update trigger: trigger=&#123;&#125; update=&#123;&#125;"</span>, trigger.id(), triggerUpdate);</span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, triggerUpdate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JobExecutionException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Job execution error - trigger=&#123;&#125; job=&#123;&#125;"</span>, trigger.id(), jobDefinition.id(), e);</span><br><span class="line">            executionFailed.inc();</span><br><span class="line"></span><br><span class="line">            jobTriggerService.releaseTrigger(e.getTrigger(), e.getUpdate());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            executionFailed.inc();</span><br><span class="line">            <span class="comment">// This is an unhandled job execution error so we mark the trigger as defective</span></span><br><span class="line">            LOG.error(<span class="string">"Unhandled job execution error - trigger=&#123;&#125; job=&#123;&#125;"</span>, trigger.id(), jobDefinition.id(), e);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Calculate the next time in the future based on the trigger schedule. We cannot do much else because we</span></span><br><span class="line">            <span class="comment">// don't know what happened and we also got no instructions from the job. (no JobExecutionException)</span></span><br><span class="line">            <span class="keyword">final</span> DateTime nextFutureTime = scheduleStrategies.nextFutureTime(trigger).orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(nextFutureTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4、DBJobTriggerService控制任务触发器的服务，使用MongoDB作为分布式锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locks and returns the next runnable trigger. The caller needs to take care of releasing the trigger lock.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> next runnable trigger if any exists, an empty &#123;<span class="doctag">@link</span> Optional&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;JobTriggerDto&gt; <span class="title">nextRunnableTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DateTime now = clock.nowUTC();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Query constraintsQuery = MongoQueryUtils.getArrayIsContainedQuery(FIELD_CONSTRAINTS, schedulerCapabilitiesService.getNodeCapabilities());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Query query = DBQuery.or(DBQuery.and(</span><br><span class="line">                        <span class="comment">// We cannot lock a trigger that is already locked by another node</span></span><br><span class="line">                        <span class="comment">// 查询处于RUNNABLE状态的触发器</span></span><br><span class="line">                        DBQuery.is(FIELD_LOCK_OWNER, <span class="keyword">null</span>),</span><br><span class="line">                        DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNABLE),</span><br><span class="line">                        DBQuery.lessThanEquals(FIELD_START_TIME, now),</span><br><span class="line">                        constraintsQuery,</span><br><span class="line"></span><br><span class="line">                        DBQuery.or( <span class="comment">// Skip triggers that have an endTime which is due</span></span><br><span class="line">                                DBQuery.notExists(FIELD_END_TIME),</span><br><span class="line">                                DBQuery.is(FIELD_END_TIME, <span class="keyword">null</span>),</span><br><span class="line">                                DBQuery.greaterThan(FIELD_END_TIME, Optional.of(now))</span><br><span class="line">                        ),</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Using the wall clock time here can be problematic if the node time is off</span></span><br><span class="line">                        <span class="comment">//       The scheduler should not lock any new triggers if it detects that its clock is wrong</span></span><br><span class="line">                        DBQuery.lessThanEquals(FIELD_NEXT_TIME, now)</span><br><span class="line">                ), DBQuery.and(</span><br><span class="line">                        <span class="comment">// 查询RUNNING状态、不属于本节点、且超过超时时间的触发器。</span></span><br><span class="line">                        <span class="comment">// 起到一定负载作用，均衡各节点间性能差异。</span></span><br><span class="line">                        DBQuery.notEquals(FIELD_LOCK_OWNER, <span class="keyword">null</span>),</span><br><span class="line">                        DBQuery.notEquals(FIELD_LOCK_OWNER, nodeId),</span><br><span class="line">                        DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNING),</span><br><span class="line">                        constraintsQuery,</span><br><span class="line">                        DBQuery.lessThan(FIELD_LAST_LOCK_TIME, now.minus(lockExpirationDuration.toMilliseconds())))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// We want to lock the trigger with the oldest next time</span></span><br><span class="line">        <span class="keyword">final</span> DBSort.SortBuilder sort = DBSort.asc(FIELD_NEXT_TIME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DBUpdate.Builder lockUpdate = DBUpdate.set(FIELD_LOCK_OWNER, nodeId)</span><br><span class="line">                .set(FIELD_LAST_LOCK_OWNER, nodeId)</span><br><span class="line">                .set(FIELD_STATUS, JobTriggerStatus.RUNNING)</span><br><span class="line">                .set(FIELD_TRIGGERED_AT, Optional.of(now))</span><br><span class="line">                .set(FIELD_LAST_LOCK_TIME, now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Atomically update, lock and return the next runnable trigger</span></span><br><span class="line">        <span class="comment">// MongoDB findAndModify 是一个原子性操作，故可以用它实现分布式锁，避免并发问题。</span></span><br><span class="line">        <span class="keyword">final</span> JobTriggerDto trigger = db.findAndModify(</span><br><span class="line">                query,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                sort,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                lockUpdate,</span><br><span class="line">                <span class="keyword">true</span>, <span class="comment">// We need the modified object so we have access to the lock information</span></span><br><span class="line">                <span class="keyword">false</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(trigger);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Releases a locked trigger. The trigger is only released if it's owned by the calling node.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> trigger       trigger that should be released</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> triggerUpdate update to apply to the trigger</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true if the trigger has been modified, false otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseTrigger</span><span class="params">(JobTriggerDto trigger, JobTriggerUpdate triggerUpdate)</span> </span>&#123;</span><br><span class="line">       requireNonNull(trigger, <span class="string">"trigger cannot be null"</span>);</span><br><span class="line">       requireNonNull(triggerUpdate, <span class="string">"triggerUpdate cannot be null"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Query query = DBQuery.and(</span><br><span class="line">               <span class="comment">// Make sure that the owner still owns the trigger</span></span><br><span class="line">               <span class="comment">// 将属于自己的触发器进行释放，修改状态。</span></span><br><span class="line">               DBQuery.is(FIELD_LOCK_OWNER, nodeId),</span><br><span class="line">               DBQuery.is(FIELD_ID, getId(trigger)),</span><br><span class="line">               <span class="comment">// Only release running triggers. The trigger might have been paused while the trigger was running</span></span><br><span class="line">               <span class="comment">// so we don't want to set it to RUNNABLE again.</span></span><br><span class="line">               <span class="comment">// <span class="doctag">TODO:</span> This is an issue. If a user set it to PAUSED, we will not unlock it. Figure something out.</span></span><br><span class="line">               <span class="comment">//       Maybe a manual trigger pause will set "nextStatus" if the trigger is currently running?</span></span><br><span class="line">               <span class="comment">//       That next status would need to be set on release.</span></span><br><span class="line">               DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNING)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">final</span> DBUpdate.Builder update = DBUpdate.set(FIELD_LOCK_OWNER, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// An empty next time indicates that this trigger should not be fired anymore. (e.g. for "once" schedules)</span></span><br><span class="line">       <span class="keyword">if</span> (triggerUpdate.nextTime().isPresent()) &#123;     </span><br><span class="line">           <span class="keyword">if</span> (triggerUpdate.status().isPresent()) &#123;</span><br><span class="line">               update.set(FIELD_STATUS, triggerUpdate.status().get());</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               update.set(FIELD_STATUS, JobTriggerStatus.RUNNABLE);</span><br><span class="line">           &#125;</span><br><span class="line">           update.set(FIELD_NEXT_TIME, triggerUpdate.nextTime().get());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           update.set(FIELD_STATUS, triggerUpdate.status().orElse(JobTriggerStatus.COMPLETE));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (triggerUpdate.data().isPresent()) &#123;</span><br><span class="line">           update.set(FIELD_DATA, triggerUpdate.data());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> changedDocs = db.update(query, update).getN();</span><br><span class="line">       <span class="keyword">if</span> (changedDocs &gt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected to release only one trigger (id="</span> + trigger.id() + <span class="string">") but database query modified "</span> + changedDocs);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> changedDocs == <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>5、JobWorkerPool为告警引擎使用的线程池。</p><p>Job执行线程池核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exeute the given job in the worker pool if there are any free slots.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> job the job to execute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the job could be executed, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable job)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If there are no available slots, we won't do anything</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> acquired = slots.tryAcquire();</span><br><span class="line">        <span class="keyword">if</span> (!acquired) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    job.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Unhandled job execution error"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    slots.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// This should not happen because we always check the semaphore before submitting jobs to the pool</span></span><br><span class="line">            slots.release();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Semaphore</code>使用的是公平策略，毕竟告警规则执行以时间顺序执行更优。<br><code>shutdownCallback</code>为<code>jobHeartbeatExecutor.scheduleAtFixedRate(this::updateLockedJobs, 0, 15, TimeUnit.SECONDS);</code>触发器更新定时器，更新触发器的FIELD_LAST_LOCK_TIME字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JobWorkerPool</span><span class="params">(@Assisted String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                     @Assisted <span class="keyword">int</span> poolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                     @Assisted Runnable shutdownCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">                     GracefulShutdownService gracefulShutdownService,</span></span></span><br><span class="line"><span class="function"><span class="params">                     MetricRegistry metricRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shutdownCallback = shutdownCallback;</span><br><span class="line">    <span class="keyword">this</span>.poolSize = poolSize;</span><br><span class="line">    checkArgument(NAME_PATTERN.matcher(name).matches(), <span class="string">"Pool name must match %s"</span>, NAME_PATTERN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.executor = buildExecutor(name, poolSize, metricRegistry);</span><br><span class="line">    <span class="keyword">this</span>.slots = <span class="keyword">new</span> Semaphore(poolSize, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    registerMetrics(metricRegistry, poolSize);</span><br><span class="line">    gracefulShutdownService.register(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心工作线程池构造参数：</p><ol><li><p>创建线程工厂：</p><ul><li>使用 <code>ThreadFactoryBuilder</code> 创建线程工厂，可以设置线程的属性，如是否为守护线程、线程名称格式等。</li><li><code>setDaemon(true)</code> 表示创建的线程为守护线程，守护线程不会阻止程序的退出。</li><li><code>setNameFormat(NAME_PREFIX + &quot;[&quot; + name + &quot;]-%d&quot;)</code> 设置线程名称的格式，其中 <code>NAME_PREFIX</code> 和 <code>name</code> 是变量，<code>%d</code> 表示线程编号。</li></ul></li><li><p>创建监控增强的线程工厂：</p><ul><li>使用 <code>InstrumentedThreadFactory</code> 封装之前创建的线程工厂，以实现监控线程创建和销毁的指标。</li></ul></li><li><p>创建队列：</p><ul><li>创建一个 <code>SynchronousQueue</code>，它是一个没有容量的阻塞队列，用于在生产者和消费者之间传递任务。</li></ul></li><li><p>创建线程池：</p><ul><li>使用 <code>ThreadPoolExecutor</code> 创建线程池，其中参数解释如下：<ul><li><code>1</code>：核心线程数，表示线程池中始终保持的活动线程数量。</li><li><code>poolSize</code>：最大线程数，表示线程池中允许存在的最大线程数量。</li><li><code>60L</code>：非核心线程的空闲时间，超过该时间将被终止。</li><li><code>TimeUnit.SECONDS</code>：时间单位，用于指定时间参数的单位。</li><li><code>workQueue</code>：工作队列，用于存放等待执行的任务。</li><li><code>itf</code>：线程工厂，用于创建线程。</li></ul></li></ul></li><li><p>创建监控增强的 <code>ExecutorService</code>：</p><ul><li>使用 <code>InstrumentedExecutorService</code> 封装之前创建的线程池，以实现监控线程池的执行指标。</li></ul></li></ol><p>总的来说，这段代码构建了一个线程池，其中线程池的核心和最大线程数由 <code>poolSize</code> 参数指定，线程的创建和销毁由 <code>InstrumentedThreadFactory</code> 和 <code>InstrumentedExecutorService</code> 实现，同时使用了一个 <code>SynchronousQueue</code> 作为工作队列，用于传递任务。整个线程池还通过监控指标进行监控。这种构建方式通常用于多线程任务的并发执行，并结合监控框架对线程池的性能和行为进行监控和度量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ExecutorService <span class="title">buildExecutor</span><span class="params">(String name, <span class="keyword">int</span> poolSize, MetricRegistry metricRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">            .setDaemon(<span class="keyword">true</span>)</span><br><span class="line">            .setNameFormat(NAME_PREFIX + <span class="string">"["</span> + name + <span class="string">"]-%d"</span>)</span><br><span class="line">            .setUncaughtExceptionHandler((t, e) -&gt; LOG.error(<span class="string">"Unhandled exception"</span>, e))</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">final</span> InstrumentedThreadFactory itf = <span class="keyword">new</span> InstrumentedThreadFactory(threadFactory, metricRegistry, name(JobWorkerPool<span class="class">.<span class="keyword">class</span>, <span class="title">name</span>))</span>;</span><br><span class="line">    <span class="keyword">final</span> SynchronousQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, poolSize, <span class="number">60L</span>, TimeUnit.SECONDS, workQueue, itf);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InstrumentedExecutorService(executor, metricRegistry, name(EXECUTOR_NAME, name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意<code>SynchronousQueue</code>使用场景和用途：<br><code>SynchronousQueue</code> 是 Java 并发包中的一个阻塞队列实现，它具有特殊的特性，用途主要是在生产者和消费者之间进行任务传递。与其他阻塞队列（如 <code>ArrayBlockingQueue</code> 或 <code>LinkedBlockingQueue</code>）不同，<code>SynchronousQueue</code> 没有实际的容量，它仅仅是用于在线程间传递数据的一种机制。</p><p><strong>用途：</strong></p><ol><li><p><strong>线程传递任务：</strong> <code>SynchronousQueue</code> 适用于需要在线程间传递任务而不保留任务的队列。例如，生产者线程生成任务，然后将任务放入 <code>SynchronousQueue</code>，消费者线程从队列中取出任务并执行。这样可以实现任务的异步传递和执行。</p></li><li><p><strong>线程池任务传递：</strong> 在一些线程池实现中，任务提交给线程池时可能会使用 <code>SynchronousQueue</code>，这样可以确保线程池不会积累任务，而是通过阻塞等待消费者线程的处理。</p></li><li><p><strong>同步协作：</strong> <code>SynchronousQueue</code> 还可以用于多个线程之间的同步协作，特别是在一个线程必须等待另一个线程完成某个操作后才能继续执行的情况。</p></li></ol><p><strong>优点：</strong></p><ol><li><p><strong>零容量：</strong> <code>SynchronousQueue</code> 没有实际的容量，它可以避免任务积累，从而可以确保任务的实时处理。</p></li><li><p><strong>高并发：</strong> <code>SynchronousQueue</code> 可以在高并发情况下有效地传递任务，由于没有实际的存储，它可以避免线程切换的开销。</p></li><li><p><strong>一对一传递：</strong> 每个插入操作都会等待对应的取出操作，这保证了任务的一对一传递。</p></li><li><p><strong>线程之间的协作：</strong> 可以用于线程之间的协作，确保一个线程等待另一个线程的结果或操作完成。</p></li></ol><p><strong>注意事项：</strong></p><ul><li><code>SynchronousQueue</code> 的主要特性是无法存储元素，因此插入操作必须等待相应的取出操作，反之亦然。这可能会导致一些线程阻塞，需要谨慎使用，以免造成死锁。</li></ul><p>总之，<code>SynchronousQueue</code> 在需要高效地传递任务或线程之间的同步协作时非常有用。但由于其特殊的特性，需要在合适的场景中使用，以确保不会导致线程阻塞或死锁。</p><p>6、总结。</p><p>以上就是Graylog的任务调度机制实现细节，Graylog原生有两种子类继承Job类，一个是<code>EventProcessorExecutionJob</code>Graylog的告警模块，另一个是<code>EventNotificationExecutionJob</code>Graylog的通知模块。</p>]]></content>
      
      
      <categories>
          
          <category> Graylog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graylog </tag>
            
            <tag> 告警 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graylog源码解析(1)-任务调度模块详解</title>
      <link href="/blog/2023/03/06/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3_bak/"/>
      <url>/blog/2023/03/06/Graylog%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-1-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3_bak/</url>
      
        <content type="html"><![CDATA[<p>告警模块是SIEM产品中重要的模块，下文将在源码层面解析在Graylog中实现此模块的任务调度模块的实现细节。</p><a id="more"></a><p>1、Graylog系统中的任务均实现于Job接口，此接口如下，包含一个工厂方法模式接口和任务执行动作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interface to be implemented by job classes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span>&lt;<span class="title">TYPE</span> <span class="keyword">extends</span> <span class="title">Job</span>&gt; </span>&#123;</span><br><span class="line">        <span class="function">TYPE <span class="title">create</span><span class="params">(JobDefinitionDto jobDefinition)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called by the scheduler when a trigger fires to execute the job. It returns a &#123;<span class="doctag">@link</span> JobTriggerUpdate&#125; that</span></span><br><span class="line"><span class="comment">     * instructs the scheduler about the next trigger execution time, trigger data and others.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx the job execution context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the trigger update</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JobExecutionException if the job execution fails</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">JobTriggerUpdate <span class="title">execute</span><span class="params">(JobExecutionContext ctx)</span> <span class="keyword">throws</span> JobExecutionException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、核心调度服务JobSchedulerService实现于Guava AbstractExecutionThreadService。</p><p>注：Guava包里的Service用于封装一个服务对象的运行状态、包括start和stop等方法。例如web服务器，RPC服务器、计时器等可以实现这个接口。对此类服务的状态管理并不轻松、需要对服务的开启/关闭进行妥善管理、特别是在多线程环境下尤为复杂。Guava 包提供了一些基础类帮助你管理复杂的状态转换逻辑和同步细节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Safety measure to make sure everything is started before we start job scheduling.</span></span><br><span class="line">    LOG.debug(<span class="string">"Waiting for server to enter RUNNING status before starting the scheduler loop"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 等待服务运行</span></span><br><span class="line">        serverStatus.awaitRunning();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        LOG.debug(<span class="string">"Was interrupted while waiting for server to enter RUNNING state. Aborting."</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LOG.debug(<span class="string">"Server entered RUNNING state, starting scheduler loop"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> executionEnabled = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 死循环判断当前service的运行状态</span></span><br><span class="line">    <span class="keyword">while</span> (isRunning()) &#123;</span><br><span class="line">        <span class="comment">// 配置文件进行配置是否允不同节点进行执行</span></span><br><span class="line">        <span class="keyword">if</span> (!schedulerConfig.canExecute()) &#123;</span><br><span class="line">            <span class="comment">// 仅在canExecute()状态转变后进行日志提示输出</span></span><br><span class="line">            executionEnabled = logExecutionConfigState(executionEnabled, <span class="keyword">false</span>);</span><br><span class="line">            clock.sleepUninterruptibly(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        executionEnabled = logExecutionConfigState(executionEnabled, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        LOG.debug(<span class="string">"Starting scheduler loop iteration"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 核心调度方法</span></span><br><span class="line">            <span class="comment">// jobExecutionEngine.execute()此方法是多个节点能否分布式执行任务的关键实现，开源版本Graylog默认只有主节点能执行任务，</span></span><br><span class="line">            <span class="comment">// 如果自己想基于开源版本实现分布式执行任务，需要修改此方法的实现。</span></span><br><span class="line">            <span class="keyword">if</span> (!jobExecutionEngine.execute() &amp;&amp; isRunning()) &#123;</span><br><span class="line">                <span class="comment">// When the execution engine returned false, there are either no free worker threads or no</span></span><br><span class="line">                <span class="comment">// runnable triggers. To avoid busy spinning we sleep for the configured duration or until</span></span><br><span class="line">                <span class="comment">// we receive a job completion event via the scheduler event bus.</span></span><br><span class="line">                <span class="comment">// 没有工作线程可用时，进行睡眠，避免busy spinning，CPU空转，造成CPU资源极大浪费。</span></span><br><span class="line">                <span class="keyword">if</span> (sleeper.sleep(loopSleepDuration.getQuantity(), loopSleepDuration.getUnit())) &#123;</span><br><span class="line">                    LOG.debug(<span class="string">"Waited for &#123;&#125; &#123;&#125; because there are either no free worker threads or no runnable triggers"</span>,</span><br><span class="line">                                loopSleepDuration.getQuantity(), loopSleepDuration.getUnit());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Received interrupted exception"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Error running job execution engine"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.debug(<span class="string">"Ending scheduler loop iteration"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Busy spinning是一种CPU密集型的等待机制，也称为忙等待。当程序需要等待某个条件满足时，它会在循环中反复检查这个条件是否已经满足，如果没有满足就一直循环下去，直到条件满足才继续执行后续操作。</span><br><span class="line"></span><br><span class="line">这种等待方式可以避免进程切换和上下文切换的开销，因为它只使用CPU资源而不会进入睡眠状态，因此可以更快地响应事件。但是，它也会占用大量的CPU时间，降低了CPU利用率，可能会影响其他程序的性能和系统的稳定性，尤其在高并发环境下容易造成资源争用，因此需要谨慎使用。</span><br><span class="line"></span><br><span class="line">在实际应用中，busy spinning通常用于短暂等待的场景，例如自旋锁、轮询等，在长时间等待的场景下则不适合使用，应该选择其他的等待方式，如阻塞、休眠等。</span><br></pre></td></tr></table></figure><p>可中断睡眠器，在不中断线程的情况下模拟睡眠，可灵活控制睡眠时间和唤醒时机。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This class provides a sleep method that can be interrupted without interrupting threads.</span></span><br><span class="line"><span class="comment">     * The same could be achieved by using a &#123;<span class="doctag">@link</span> CountDownLatch&#125; but that one cannot be reused and we would need</span></span><br><span class="line"><span class="comment">     * to create new latch objects all the time. This implementation is using a &#123;<span class="doctag">@link</span> Semaphore&#125; internally which</span></span><br><span class="line"><span class="comment">     * can be reused.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@VisibleForTesting</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptibleSleeper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">        InterruptibleSleeper() &#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">new</span> Semaphore(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@VisibleForTesting</span></span><br><span class="line">        InterruptibleSleeper(Semaphore semaphore) &#123;</span><br><span class="line">            <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Blocks for the given duration or until interrupted via &#123;<span class="doctag">@link</span> #interrupt()&#125;.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> duration the duration to sleep</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> unit     the duration unit</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> true if slept for the given duration, false if interrupted</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> InterruptedException if the thread gets interrupted</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> duration, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">// First we have to drain all available permits because interrupt() might get called very often and thus</span></span><br><span class="line">            <span class="comment">// there might be a lot of permits.</span></span><br><span class="line">            semaphore.drainPermits();</span><br><span class="line">            <span class="comment">// Now try to acquire a permit. This won't work except #interrupt() got called in the meantime.</span></span><br><span class="line">            <span class="comment">// It waits for the given duration, basically emulating a sleep.</span></span><br><span class="line">            <span class="keyword">return</span> !semaphore.tryAcquire(duration, unit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Interrupt a &#123;<span class="doctag">@link</span> #sleep(long, TimeUnit)&#125; call so it unblocks.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Attention: this will increase available permits every time it's called.</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3、JobExecutionEngine执行引擎检查可运行的触发器，并在给定的工作线程池中启动作业执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the engine. This will try to lock a trigger and execute the job if there are free slots in the</span></span><br><span class="line"><span class="comment">     * worker pool and the engine is not shutting down.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if a job trigger has been locked and the related job has been triggered, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Cleanup stale scheduler state *before* processing any triggers for the first time.</span></span><br><span class="line">        <span class="comment">// This is a no-op after the first invocation.</span></span><br><span class="line">        <span class="comment">// 每次启动之前，会修改当前节点在数据库中的处于running状态的触发器状态，使其置于runnable状态。</span></span><br><span class="line">        <span class="keyword">if</span> (shouldCleanup.get()) &#123;</span><br><span class="line">            cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// We want to avoid a call to the database if there are no free slots in the pool or the engine is shutting down</span></span><br><span class="line">        <span class="comment">// 判断执行条件</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning.get() &amp;&amp; workerPool.hasFreeSlots()) &#123;</span><br><span class="line">            <span class="comment">// 按照FIELD_NEXT_TIME顺序，获取未被上锁或已上锁但锁超过5min超时时间(默认)的触发器。</span></span><br><span class="line">            <span class="keyword">final</span> Optional&lt;JobTriggerDto&gt; triggerOptional = jobTriggerService.nextRunnableTrigger();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (triggerOptional.isPresent()) &#123;</span><br><span class="line">                <span class="keyword">final</span> JobTriggerDto trigger = triggerOptional.get();</span><br><span class="line">                <span class="comment">// 线程池执行触发器任务</span></span><br><span class="line">                <span class="keyword">if</span> (!workerPool.execute(() -&gt; handleTrigger(trigger))) &#123;</span><br><span class="line">                    <span class="comment">// The job couldn't be executed so we have to release the trigger again with the same nextTime</span></span><br><span class="line">                    <span class="comment">// 此触发器无法执行时，更新状态为RUNNABLE，且nextTime不变，把触发器释放。</span></span><br><span class="line">                    jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(trigger.nextTime()));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>handleTrigger(JobTriggerDto trigger)</code>执行触发器，获取trigger、obDefinition、job这些需要执行的方法和参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleTrigger</span><span class="params">(JobTriggerDto trigger)</span> </span>&#123;</span><br><span class="line">        LOG.trace(<span class="string">"Locked trigger &#123;&#125; (owner=&#123;&#125;)"</span>, trigger.id(), trigger.lock().owner());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> JobDefinitionDto jobDefinition = jobDefinitionService.get(trigger.jobDefinitionId())</span><br><span class="line">                    .orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">"Couldn't find job definition "</span> + trigger.jobDefinitionId()));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Job job = jobFactory.get(jobDefinition.config().type()).create(jobDefinition);</span><br><span class="line">            <span class="keyword">if</span> (job == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Couldn't find job factory for type "</span> + jobDefinition.config().type());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            executionTime.time(() -&gt; executeJob(trigger, jobDefinition, job));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">            <span class="comment">// The trigger cannot be handled because of a permanent error so we mark the trigger as defective</span></span><br><span class="line">            LOG.error(<span class="string">"Couldn't handle trigger due to a permanent error &#123;&#125; - trigger won't be retried"</span>, trigger.id(), e);</span><br><span class="line">            jobTriggerService.setTriggerError(trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// The trigger cannot be handled because of an unknown error, retry in a few seconds</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> Check if we need to implement a max-retry after which the trigger is set to ERROR</span></span><br><span class="line">            <span class="keyword">final</span> DateTime nextTime = DateTime.now(DateTimeZone.UTC).plusSeconds(<span class="number">5</span>);</span><br><span class="line">            LOG.error(<span class="string">"Couldn't handle trigger &#123;&#125; - retrying at &#123;&#125;"</span>, trigger.id(), nextTime, e);</span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(nextTime));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 任务执行结束，有可执行资源，调用InterruptibleSleeper.interrupt()方法，中断JobSchedulerService的睡眠，让其继续执行。</span></span><br><span class="line">            eventBus.post(JobCompletedEvent.INSTANCE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终的Job执行的方法，源码增加了些指标监控注解和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WithSpan</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeJob</span><span class="params">(JobTriggerDto trigger, JobDefinitionDto jobDefinition, Job job)</span> </span>&#123;</span><br><span class="line">        Span.current().setAttribute(SCHEDULER_JOB_CLASS, job.getClass().getSimpleName())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_TYPE, jobDefinition.config().type())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_TITLE, jobDefinition.title())</span><br><span class="line">                .setAttribute(SCHEDULER_JOB_DEFINITION_ID, Strings.valueOf(jobDefinition.id()));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"Execute job: &#123;&#125;/&#123;&#125;/&#123;&#125; (job-class=&#123;&#125; trigger=&#123;&#125; config=&#123;&#125;)"</span>, jobDefinition.title(), jobDefinition.id(),</span><br><span class="line">                        jobDefinition.config().type(), job.getClass().getSimpleName(), trigger.id(), jobDefinition.config());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用Job接口执行方法，执行不同类型的Job实现类的方法。</span></span><br><span class="line">            <span class="keyword">final</span> JobTriggerUpdate triggerUpdate = job.execute(JobExecutionContext.create(trigger, jobDefinition, jobTriggerUpdatesFactory.create(trigger), isRunning, jobTriggerService));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (triggerUpdate == <span class="keyword">null</span>) &#123;</span><br><span class="line">                executionFailed.inc();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Job#execute() must not return null - this is a bug in the job class"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            executionSuccessful.inc();</span><br><span class="line"></span><br><span class="line">            LOG.trace(<span class="string">"Update trigger: trigger=&#123;&#125; update=&#123;&#125;"</span>, trigger.id(), triggerUpdate);</span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, triggerUpdate);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JobExecutionException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Job execution error - trigger=&#123;&#125; job=&#123;&#125;"</span>, trigger.id(), jobDefinition.id(), e);</span><br><span class="line">            executionFailed.inc();</span><br><span class="line"></span><br><span class="line">            jobTriggerService.releaseTrigger(e.getTrigger(), e.getUpdate());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            executionFailed.inc();</span><br><span class="line">            <span class="comment">// This is an unhandled job execution error so we mark the trigger as defective</span></span><br><span class="line">            LOG.error(<span class="string">"Unhandled job execution error - trigger=&#123;&#125; job=&#123;&#125;"</span>, trigger.id(), jobDefinition.id(), e);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Calculate the next time in the future based on the trigger schedule. We cannot do much else because we</span></span><br><span class="line">            <span class="comment">// don't know what happened and we also got no instructions from the job. (no JobExecutionException)</span></span><br><span class="line">            <span class="keyword">final</span> DateTime nextFutureTime = scheduleStrategies.nextFutureTime(trigger).orElse(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            jobTriggerService.releaseTrigger(trigger, JobTriggerUpdate.withNextTime(nextFutureTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4、DBJobTriggerService控制任务触发器的服务，使用MongoDB作为分布式锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locks and returns the next runnable trigger. The caller needs to take care of releasing the trigger lock.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> next runnable trigger if any exists, an empty &#123;<span class="doctag">@link</span> Optional&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;JobTriggerDto&gt; <span class="title">nextRunnableTrigger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DateTime now = clock.nowUTC();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Query constraintsQuery = MongoQueryUtils.getArrayIsContainedQuery(FIELD_CONSTRAINTS, schedulerCapabilitiesService.getNodeCapabilities());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Query query = DBQuery.or(DBQuery.and(</span><br><span class="line">                        <span class="comment">// We cannot lock a trigger that is already locked by another node</span></span><br><span class="line">                        <span class="comment">// 查询处于RUNNABLE状态的触发器</span></span><br><span class="line">                        DBQuery.is(FIELD_LOCK_OWNER, <span class="keyword">null</span>),</span><br><span class="line">                        DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNABLE),</span><br><span class="line">                        DBQuery.lessThanEquals(FIELD_START_TIME, now),</span><br><span class="line">                        constraintsQuery,</span><br><span class="line"></span><br><span class="line">                        DBQuery.or( <span class="comment">// Skip triggers that have an endTime which is due</span></span><br><span class="line">                                DBQuery.notExists(FIELD_END_TIME),</span><br><span class="line">                                DBQuery.is(FIELD_END_TIME, <span class="keyword">null</span>),</span><br><span class="line">                                DBQuery.greaterThan(FIELD_END_TIME, Optional.of(now))</span><br><span class="line">                        ),</span><br><span class="line">                        <span class="comment">// <span class="doctag">TODO:</span> Using the wall clock time here can be problematic if the node time is off</span></span><br><span class="line">                        <span class="comment">//       The scheduler should not lock any new triggers if it detects that its clock is wrong</span></span><br><span class="line">                        DBQuery.lessThanEquals(FIELD_NEXT_TIME, now)</span><br><span class="line">                ), DBQuery.and(</span><br><span class="line">                        <span class="comment">// 查询RUNNING状态、不属于本节点、且超过超时时间的触发器。</span></span><br><span class="line">                        <span class="comment">// 起到一定负载作用，均衡各节点间性能差异。</span></span><br><span class="line">                        DBQuery.notEquals(FIELD_LOCK_OWNER, <span class="keyword">null</span>),</span><br><span class="line">                        DBQuery.notEquals(FIELD_LOCK_OWNER, nodeId),</span><br><span class="line">                        DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNING),</span><br><span class="line">                        constraintsQuery,</span><br><span class="line">                        DBQuery.lessThan(FIELD_LAST_LOCK_TIME, now.minus(lockExpirationDuration.toMilliseconds())))</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// We want to lock the trigger with the oldest next time</span></span><br><span class="line">        <span class="keyword">final</span> DBSort.SortBuilder sort = DBSort.asc(FIELD_NEXT_TIME);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DBUpdate.Builder lockUpdate = DBUpdate.set(FIELD_LOCK_OWNER, nodeId)</span><br><span class="line">                .set(FIELD_LAST_LOCK_OWNER, nodeId)</span><br><span class="line">                .set(FIELD_STATUS, JobTriggerStatus.RUNNING)</span><br><span class="line">                .set(FIELD_TRIGGERED_AT, Optional.of(now))</span><br><span class="line">                .set(FIELD_LAST_LOCK_TIME, now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Atomically update, lock and return the next runnable trigger</span></span><br><span class="line">        <span class="comment">// MongoDB findAndModify 是一个原子性操作，故可以用它实现分布式锁，避免并发问题。</span></span><br><span class="line">        <span class="keyword">final</span> JobTriggerDto trigger = db.findAndModify(</span><br><span class="line">                query,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                sort,</span><br><span class="line">                <span class="keyword">false</span>,</span><br><span class="line">                lockUpdate,</span><br><span class="line">                <span class="keyword">true</span>, <span class="comment">// We need the modified object so we have access to the lock information</span></span><br><span class="line">                <span class="keyword">false</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(trigger);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Releases a locked trigger. The trigger is only released if it's owned by the calling node.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> trigger       trigger that should be released</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> triggerUpdate update to apply to the trigger</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> true if the trigger has been modified, false otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseTrigger</span><span class="params">(JobTriggerDto trigger, JobTriggerUpdate triggerUpdate)</span> </span>&#123;</span><br><span class="line">       requireNonNull(trigger, <span class="string">"trigger cannot be null"</span>);</span><br><span class="line">       requireNonNull(triggerUpdate, <span class="string">"triggerUpdate cannot be null"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> Query query = DBQuery.and(</span><br><span class="line">               <span class="comment">// Make sure that the owner still owns the trigger</span></span><br><span class="line">               <span class="comment">// 将属于自己的触发器进行释放，修改状态。</span></span><br><span class="line">               DBQuery.is(FIELD_LOCK_OWNER, nodeId),</span><br><span class="line">               DBQuery.is(FIELD_ID, getId(trigger)),</span><br><span class="line">               <span class="comment">// Only release running triggers. The trigger might have been paused while the trigger was running</span></span><br><span class="line">               <span class="comment">// so we don't want to set it to RUNNABLE again.</span></span><br><span class="line">               <span class="comment">// <span class="doctag">TODO:</span> This is an issue. If a user set it to PAUSED, we will not unlock it. Figure something out.</span></span><br><span class="line">               <span class="comment">//       Maybe a manual trigger pause will set "nextStatus" if the trigger is currently running?</span></span><br><span class="line">               <span class="comment">//       That next status would need to be set on release.</span></span><br><span class="line">               DBQuery.is(FIELD_STATUS, JobTriggerStatus.RUNNING)</span><br><span class="line">       );</span><br><span class="line">       <span class="keyword">final</span> DBUpdate.Builder update = DBUpdate.set(FIELD_LOCK_OWNER, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// An empty next time indicates that this trigger should not be fired anymore. (e.g. for "once" schedules)</span></span><br><span class="line">       <span class="keyword">if</span> (triggerUpdate.nextTime().isPresent()) &#123;     </span><br><span class="line">           <span class="keyword">if</span> (triggerUpdate.status().isPresent()) &#123;</span><br><span class="line">               update.set(FIELD_STATUS, triggerUpdate.status().get());</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               update.set(FIELD_STATUS, JobTriggerStatus.RUNNABLE);</span><br><span class="line">           &#125;</span><br><span class="line">           update.set(FIELD_NEXT_TIME, triggerUpdate.nextTime().get());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           update.set(FIELD_STATUS, triggerUpdate.status().orElse(JobTriggerStatus.COMPLETE));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (triggerUpdate.data().isPresent()) &#123;</span><br><span class="line">           update.set(FIELD_DATA, triggerUpdate.data());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> changedDocs = db.update(query, update).getN();</span><br><span class="line">       <span class="keyword">if</span> (changedDocs &gt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Expected to release only one trigger (id="</span> + trigger.id() + <span class="string">") but database query modified "</span> + changedDocs);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> changedDocs == <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>5、JobWorkerPool为告警引擎使用的线程池。</p><p>Job执行线程池核心方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Exeute the given job in the worker pool if there are any free slots.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> job the job to execute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true if the job could be executed, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Runnable job)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If there are no available slots, we won't do anything</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> acquired = slots.tryAcquire();</span><br><span class="line">        <span class="keyword">if</span> (!acquired) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    job.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Unhandled job execution error"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    slots.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">            <span class="comment">// This should not happen because we always check the semaphore before submitting jobs to the pool</span></span><br><span class="line">            slots.release();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Semaphore</code>使用的是公平策略，毕竟告警规则执行以时间顺序执行更优。<br><code>shutdownCallback</code>为<code>jobHeartbeatExecutor.scheduleAtFixedRate(this::updateLockedJobs, 0, 15, TimeUnit.SECONDS);</code>触发器更新定时器，更新触发器的FIELD_LAST_LOCK_TIME字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JobWorkerPool</span><span class="params">(@Assisted String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                     @Assisted <span class="keyword">int</span> poolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                     @Assisted Runnable shutdownCallback,</span></span></span><br><span class="line"><span class="function"><span class="params">                     GracefulShutdownService gracefulShutdownService,</span></span></span><br><span class="line"><span class="function"><span class="params">                     MetricRegistry metricRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.shutdownCallback = shutdownCallback;</span><br><span class="line">    <span class="keyword">this</span>.poolSize = poolSize;</span><br><span class="line">    checkArgument(NAME_PATTERN.matcher(name).matches(), <span class="string">"Pool name must match %s"</span>, NAME_PATTERN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.executor = buildExecutor(name, poolSize, metricRegistry);</span><br><span class="line">    <span class="keyword">this</span>.slots = <span class="keyword">new</span> Semaphore(poolSize, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    registerMetrics(metricRegistry, poolSize);</span><br><span class="line">    gracefulShutdownService.register(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心工作线程池构造参数：</p><ol><li><p>创建线程工厂：</p><ul><li>使用 <code>ThreadFactoryBuilder</code> 创建线程工厂，可以设置线程的属性，如是否为守护线程、线程名称格式等。</li><li><code>setDaemon(true)</code> 表示创建的线程为守护线程，守护线程不会阻止程序的退出。</li><li><code>setNameFormat(NAME_PREFIX + &quot;[&quot; + name + &quot;]-%d&quot;)</code> 设置线程名称的格式，其中 <code>NAME_PREFIX</code> 和 <code>name</code> 是变量，<code>%d</code> 表示线程编号。</li></ul></li><li><p>创建监控增强的线程工厂：</p><ul><li>使用 <code>InstrumentedThreadFactory</code> 封装之前创建的线程工厂，以实现监控线程创建和销毁的指标。</li></ul></li><li><p>创建队列：</p><ul><li>创建一个 <code>SynchronousQueue</code>，它是一个没有容量的阻塞队列，用于在生产者和消费者之间传递任务。</li></ul></li><li><p>创建线程池：</p><ul><li>使用 <code>ThreadPoolExecutor</code> 创建线程池，其中参数解释如下：<ul><li><code>1</code>：核心线程数，表示线程池中始终保持的活动线程数量。</li><li><code>poolSize</code>：最大线程数，表示线程池中允许存在的最大线程数量。</li><li><code>60L</code>：非核心线程的空闲时间，超过该时间将被终止。</li><li><code>TimeUnit.SECONDS</code>：时间单位，用于指定时间参数的单位。</li><li><code>workQueue</code>：工作队列，用于存放等待执行的任务。</li><li><code>itf</code>：线程工厂，用于创建线程。</li></ul></li></ul></li><li><p>创建监控增强的 <code>ExecutorService</code>：</p><ul><li>使用 <code>InstrumentedExecutorService</code> 封装之前创建的线程池，以实现监控线程池的执行指标。</li></ul></li></ol><p>总的来说，这段代码构建了一个线程池，其中线程池的核心和最大线程数由 <code>poolSize</code> 参数指定，线程的创建和销毁由 <code>InstrumentedThreadFactory</code> 和 <code>InstrumentedExecutorService</code> 实现，同时使用了一个 <code>SynchronousQueue</code> 作为工作队列，用于传递任务。整个线程池还通过监控指标进行监控。这种构建方式通常用于多线程任务的并发执行，并结合监控框架对线程池的性能和行为进行监控和度量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ExecutorService <span class="title">buildExecutor</span><span class="params">(String name, <span class="keyword">int</span> poolSize, MetricRegistry metricRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">            .setDaemon(<span class="keyword">true</span>)</span><br><span class="line">            .setNameFormat(NAME_PREFIX + <span class="string">"["</span> + name + <span class="string">"]-%d"</span>)</span><br><span class="line">            .setUncaughtExceptionHandler((t, e) -&gt; LOG.error(<span class="string">"Unhandled exception"</span>, e))</span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">final</span> InstrumentedThreadFactory itf = <span class="keyword">new</span> InstrumentedThreadFactory(threadFactory, metricRegistry, name(JobWorkerPool<span class="class">.<span class="keyword">class</span>, <span class="title">name</span>))</span>;</span><br><span class="line">    <span class="keyword">final</span> SynchronousQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, poolSize, <span class="number">60L</span>, TimeUnit.SECONDS, workQueue, itf);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> InstrumentedExecutorService(executor, metricRegistry, name(EXECUTOR_NAME, name));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意<code>SynchronousQueue</code>使用场景和用途：<br><code>SynchronousQueue</code> 是 Java 并发包中的一个阻塞队列实现，它具有特殊的特性，用途主要是在生产者和消费者之间进行任务传递。与其他阻塞队列（如 <code>ArrayBlockingQueue</code> 或 <code>LinkedBlockingQueue</code>）不同，<code>SynchronousQueue</code> 没有实际的容量，它仅仅是用于在线程间传递数据的一种机制。</p><p><strong>用途：</strong></p><ol><li><p><strong>线程传递任务：</strong> <code>SynchronousQueue</code> 适用于需要在线程间传递任务而不保留任务的队列。例如，生产者线程生成任务，然后将任务放入 <code>SynchronousQueue</code>，消费者线程从队列中取出任务并执行。这样可以实现任务的异步传递和执行。</p></li><li><p><strong>线程池任务传递：</strong> 在一些线程池实现中，任务提交给线程池时可能会使用 <code>SynchronousQueue</code>，这样可以确保线程池不会积累任务，而是通过阻塞等待消费者线程的处理。</p></li><li><p><strong>同步协作：</strong> <code>SynchronousQueue</code> 还可以用于多个线程之间的同步协作，特别是在一个线程必须等待另一个线程完成某个操作后才能继续执行的情况。</p></li></ol><p><strong>优点：</strong></p><ol><li><p><strong>零容量：</strong> <code>SynchronousQueue</code> 没有实际的容量，它可以避免任务积累，从而可以确保任务的实时处理。</p></li><li><p><strong>高并发：</strong> <code>SynchronousQueue</code> 可以在高并发情况下有效地传递任务，由于没有实际的存储，它可以避免线程切换的开销。</p></li><li><p><strong>一对一传递：</strong> 每个插入操作都会等待对应的取出操作，这保证了任务的一对一传递。</p></li><li><p><strong>线程之间的协作：</strong> 可以用于线程之间的协作，确保一个线程等待另一个线程的结果或操作完成。</p></li></ol><p><strong>注意事项：</strong></p><ul><li><code>SynchronousQueue</code> 的主要特性是无法存储元素，因此插入操作必须等待相应的取出操作，反之亦然。这可能会导致一些线程阻塞，需要谨慎使用，以免造成死锁。</li></ul><p>总之，<code>SynchronousQueue</code> 在需要高效地传递任务或线程之间的同步协作时非常有用。但由于其特殊的特性，需要在合适的场景中使用，以确保不会导致线程阻塞或死锁。</p><p>6、总结。</p><p>以上就是Graylog的任务调度机制实现细节，Graylog原生有两种子类继承Job类，一个是<code>EventProcessorExecutionJob</code>Graylog的告警模块，另一个是<code>EventNotificationExecutionJob</code>Graylog的通知模块。</p>]]></content>
      
      
      <categories>
          
          <category> Graylog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Graylog </tag>
            
            <tag> 告警 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java本地化适配过程中字符导致报错</title>
      <link href="/blog/2023/02/22/Java%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%80%82%E9%85%8D%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E6%8A%A5%E9%94%99/"/>
      <url>/blog/2023/02/22/Java%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%80%82%E9%85%8D%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AD%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>起因在公司测试环境中部署项目服务时，启动服务报错：can’t find bundle for base name message, locale en_US</p><a id="more"></a><h2 id="处理办法"><a href="#处理办法" class="headerlink" title="处理办法"></a>处理办法</h2><p>检查配置和路径后，确定实际问题出在 <code>Malformed \uxxxx encoding</code> 这句错误上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">将本地化文件中的 &#39;\&#39; 替换成 &#39;&#x2F;&#39;，即可。</span><br></pre></td></tr></table></figure><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查看当前locale设置</span><br><span class="line"></span><br><span class="line">locale</span><br><span class="line"></span><br><span class="line">查看当前系统所有可用locale</span><br><span class="line"></span><br><span class="line">locale -a</span><br><span class="line"></span><br><span class="line">查看当前系统</span><br><span class="line"></span><br><span class="line">localectl status</span><br></pre></td></tr></table></figure><p>创建/etc/locale.conf文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line">LC_COLLATE=C</span><br><span class="line">LC_TIME=en_DK.UTF-8</span><br></pre></td></tr></table></figure><p>source使其生效</p><h2 id="关联问题"><a href="#关联问题" class="headerlink" title="关联问题"></a>关联问题</h2><p><a href="https://stackoverflow.com/questions/12986234/cant-find-bundle-for-base-name-bundle-locale-en-us" target="_blank" rel="noopener">Can’t find bundle for base name /Bundle, locale en_US</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://stackoverflow.com/questions/17043037/ant-malformed-uxxxx-encoding-in-propertyfile-task" target="_blank" rel="noopener">Malformed \uxxxx encoding in propertyfile task</a></p><p><a href="https://coderanch.com/t/107014/build-tools/Malformed-uxxxx-encoding-error" target="_blank" rel="noopener">Malformed \uxxxx encoding error !!</a></p><p><a href="https://cloud.tencent.com/developer/article/1671446" target="_blank" rel="noopener">linux下设置locale</a></p><p><a href="https://blog.csdn.net/shenyuflying/article/details/53244899" target="_blank" rel="noopener">linux中的本地化</a></p><p><a href="https://blog.csdn.net/liaowenxiong/article/details/116399481" target="_blank" rel="noopener">Linux 命令之 localectl – 控制系统的本地化与键盘布局</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拉取github代码，在已配置ssh密钥，仍需要输入密码--如何处理</title>
      <link href="/blog/2023/02/05/%E6%8B%89%E5%8F%96github%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8%E5%B7%B2%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%EF%BC%8C%E4%BB%8D%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/"/>
      <url>/blog/2023/02/05/%E6%8B%89%E5%8F%96github%E4%BB%A3%E7%A0%81%EF%BC%8C%E5%9C%A8%E5%B7%B2%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%EF%BC%8C%E4%BB%8D%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="拉取github代码，在已配置ssh密钥，仍需要输入密码"><a href="#拉取github代码，在已配置ssh密钥，仍需要输入密码" class="headerlink" title="拉取github代码，在已配置ssh密钥，仍需要输入密码"></a>拉取github代码，在已配置ssh密钥，仍需要输入密码</h1><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>win11 + git + 代理</p><hr><h2 id="测试ssh连接"><a href="#测试ssh连接" class="headerlink" title="测试ssh连接"></a>测试ssh连接</h2><p>输入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>结果显示拒绝</p><p><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection" target="_blank" rel="noopener">GITHUB官方参考文档</a></p><hr><h2 id="ssh故障排除"><a href="#ssh故障排除" class="headerlink" title="ssh故障排除"></a>ssh故障排除</h2><p>要测试通过 HTTPS 端口的 SSH 是否可行，请运行以下 SSH 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T -p 443 git@ssh.github.com</span><br><span class="line">&gt; Hi USERNAME! You&#39;ve successfully authenticated, but GitHub does not</span><br><span class="line">&gt; provide shell access.</span><br></pre></td></tr></table></figure><p><a href="https://docs.github.com/zh/authentication/troubleshooting-ssh/using-ssh-over-the-https-port" target="_blank" rel="noopener">GITHUB官方参考文档</a></p><hr><h2 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h2><p>修改或新建<code>~/.ssh/config</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">Port 443</span><br><span class="line">User git</span><br></pre></td></tr></table></figure><p>成功解决</p><hr><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://learnku.com/devtools/t/72153" target="_blank" rel="noopener">git clone输入密码提示 Permission denied, please try again.</a></p>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsa host key for github.com has changed and you have requested strict checking.--如何处理</title>
      <link href="/blog/2023/02/05/rsa-host-key-for-github-com-has-changed-and-you-have-requested-strict-checking-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/"/>
      <url>/blog/2023/02/05/rsa-host-key-for-github-com-has-changed-and-you-have-requested-strict-checking-%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="github拉取代码时遇到的一些问题"><a href="#github拉取代码时遇到的一些问题" class="headerlink" title="github拉取代码时遇到的一些问题"></a>github拉取代码时遇到的一些问题</h1><p>git pull时报错：rsa host key for github.com has changed and you have requested strict checking.</p><a id="more"></a><hr><h2 id="Method-1-Remove-keys"><a href="#Method-1-Remove-keys" class="headerlink" title="Method 1: Remove keys"></a>Method 1: Remove keys</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R &lt;server_name&gt;</span><br><span class="line">(or)</span><br><span class="line">ssh-keygen -R &lt;ip_address&gt;</span><br><span class="line"></span><br><span class="line">-R含义：从 known_hosts 文件中删除所有属于 hostname 的密钥</span><br><span class="line">这个选项主要用于删除经过散列的主机(参见 -H 选项)的密钥。</span><br></pre></td></tr></table></figure><h2 id="Method-2-Delete-key-from-home-user-ssh-known-hosts"><a href="#Method-2-Delete-key-from-home-user-ssh-known-hosts" class="headerlink" title="Method 2: Delete key from /home/user/.ssh/known_hosts"></a>Method 2: Delete key from /home/user/.ssh/known_hosts</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;home&#x2F;user&#x2F;.ssh&#x2F;known_hosts +linenumber</span><br><span class="line">dd</span><br><span class="line">wq</span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://gist.github.com/fizerkhan/41f9c525db5b3b16bfcb" target="_blank" rel="noopener">RSA Host Key has been changed.</a></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-插件篇:maven-shade-plugin</title>
      <link href="/blog/2020/06/01/maven-%E6%8F%92%E4%BB%B6%E7%AF%87-maven-shade-plugin/"/>
      <url>/blog/2020/06/01/maven-%E6%8F%92%E4%BB%B6%E7%AF%87-maven-shade-plugin/</url>
      
        <content type="html"><![CDATA[<p>​    </p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> maven </category>
          
          <category> maven-plugins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
            <tag> maven-plugins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub远程仓库拉取代码合并到本地分支</title>
      <link href="/blog/2020/05/26/GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF/"/>
      <url>/blog/2020/05/26/GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<p>暂时记录下三种方式</p><a id="more"></a><h1 id="git-pull：获取最新代码到本地，并自动合并到当前分支"><a href="#git-pull：获取最新代码到本地，并自动合并到当前分支" class="headerlink" title="git pull：获取最新代码到本地，并自动合并到当前分支"></a>git pull：获取最新代码到本地，并自动合并到当前分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v</span><br><span class="line">//直接拉取并合并最新代码</span><br><span class="line">$ git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]</span><br><span class="line">$ git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]</span><br></pre></td></tr></table></figure><p><code>有把握时，直接合并</code></p><h1 id="git-fetch-merge-获取最新代码到本地，然后手动合并分支"><a href="#git-fetch-merge-获取最新代码到本地，然后手动合并分支" class="headerlink" title="git fetch + merge: 获取最新代码到本地，然后手动合并分支"></a>git fetch + merge: 获取最新代码到本地，然后手动合并分支</h1><h2 id="需管理临时分支"><a href="#需管理临时分支" class="headerlink" title="需管理临时分支"></a>需管理临时分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//查看当前远程的版本</span><br><span class="line">$ git remote -v </span><br><span class="line">//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]</span><br><span class="line">$ git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]</span><br><span class="line">$ git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]</span><br><span class="line">//合并最新分支到本地分支</span><br><span class="line">$ git merge master1    [示例1：合并本地分支master1到当前分支]</span><br><span class="line">$ git merge dev1   [示例2：合并本地分支dev1到当前分支]</span><br><span class="line">//删除本地临时分支</span><br><span class="line">$ git branch -D master1    [示例1：删除本地分支master1]</span><br><span class="line">$ git branch -D dev1 [示例1：删除本地分支dev1]</span><br></pre></td></tr></table></figure><p><code>有些繁琐，不怎么用</code></p><h1 id="无需管理临时分支"><a href="#无需管理临时分支" class="headerlink" title="无需管理临时分支"></a>无需管理临时分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line">$ git remote -v</span><br><span class="line">//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line">$ git fetch origin master  [示例1：获取远端的origin/master分支]</span><br><span class="line">$ git fetch origin dev [示例2：获取远端的origin/dev分支]</span><br><span class="line">//查看版本差异</span><br><span class="line">$ git <span class="built_in">log</span> -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]</span><br><span class="line">$ git <span class="built_in">log</span> -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]</span><br><span class="line">//合并最新代码到本地分支</span><br><span class="line">$ git merge origin/master  [示例1：合并远端分支origin/master到当前分支]</span><br><span class="line">$ git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]</span><br></pre></td></tr></table></figure><p><code>较常用</code></p><h1 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h1><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><h2 id="git-rebase-和-merge区别及使用场景"><a href="#git-rebase-和-merge区别及使用场景" class="headerlink" title="git rebase 和 merge区别及使用场景"></a>git rebase 和 merge区别及使用场景</h2><h2 id="git-tag使用场景"><a href="#git-tag使用场景" class="headerlink" title="git tag使用场景"></a>git tag使用场景</h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
            <tag> 每日一记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch中如何进行时间范围查询</title>
      <link href="/blog/2020/05/24/ElasticSearch%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2/"/>
      <url>/blog/2020/05/24/ElasticSearch%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%97%B6%E9%97%B4%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>在开发过程中有需求是对ElasticSearch中对一定时间范围内数据进行查询,完成后做下记录.</p><a id="more"></a><h1 id="数值范围查询"><a href="#数值范围查询" class="headerlink" title="数值范围查询"></a>数值范围查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot; : &#123;</span><br><span class="line">            &quot;age&quot; : &#123;</span><br><span class="line">                &quot;gte&quot; : 10,</span><br><span class="line">                &quot;lte&quot; : 20,</span><br><span class="line">                &quot;boost&quot; : 2.0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="范围查询的符号"><a href="#范围查询的符号" class="headerlink" title="范围查询的符号"></a>范围查询的符号</h1><table><thead><tr><th align="center">符号</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">gt</td><td align="center">&gt;</td></tr><tr><td align="center">gte</td><td align="center">&gt;=</td></tr><tr><td align="center">lt</td><td align="center">&lt;</td></tr><tr><td align="center">lte</td><td align="center">&lt;=</td></tr></tbody></table><h1 id="时间范围查询"><a href="#时间范围查询" class="headerlink" title="时间范围查询"></a>时间范围查询</h1><p>如果为<code>date</code>类型数据,可以使用<code>data math</code>,如下:</p><h2 id="data-math"><a href="#data-math" class="headerlink" title="data math"></a>data math</h2><p><code>gt</code><br>Rounds up to the first millisecond not covered by the rounded date.<br>For example, 2014-11-18||/M rounds up to 2014-12-01T00:00:00.000, excluding the entire month of November.</p><p><code>gte</code><br>Rounds down to the first millisecond.<br>For example, 2014-11-18||/M rounds down to 2014-11-01T00:00:00.000, including the entire month.</p><p><code>lt</code><br>Rounds down to the last millisecond before the rounded value.<br>For example, 2014-11-18||/M rounds down to 2014-10-31T23:59:59.999, excluding the entire month of November.</p><p><code>lte</code><br>Rounds up to the latest millisecond in the rounding interval.<br>For example, 2014-11-18||/M rounds up to 2014-11-30T23:59:59.999, including the entire month.</p><h2 id="昨天和今天的范围"><a href="#昨天和今天的范围" class="headerlink" title="昨天和今天的范围"></a>昨天和今天的范围</h2><p><code>&quot;gte&quot; : &quot;now-1d/d&quot; //昨天00:00:00</code><br><code>&quot;lt&quot; :  &quot;now/d&quot;        // 今天晚上00:00:00</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot; : &#123;</span><br><span class="line">            &quot;timestamp&quot; : &#123;</span><br><span class="line">                &quot;gte&quot; : &quot;now-1d&#x2F;d&quot;,</span><br><span class="line">                &quot;lt&quot; :  &quot;now&#x2F;d&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时间公式"><a href="#时间公式" class="headerlink" title="时间公式"></a>时间公式</h2><ul><li><code>+1h</code>: Add one hour//加一小时  </li><li><code>-1d</code>: Subtract one day//减一小时 </li><li><code>/d</code>: Round down to the nearest day//四舍五入到<code>最近</code>一天  </li></ul><table><thead><tr><th align="center">表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">Years</td></tr><tr><td align="center">M</td><td align="center">Months</td></tr><tr><td align="center">w</td><td align="center">weeks</td></tr><tr><td align="center">d</td><td align="center">Days</td></tr><tr><td align="center">h</td><td align="center">Hours</td></tr><tr><td align="center">H</td><td align="center">Houss</td></tr><tr><td align="center">m</td><td align="center">minutes</td></tr><tr><td align="center">s</td><td align="center">Seconds</td></tr></tbody></table><p>假如当前系统时间为<code>now = 2001-01-01 12:00:00</code>,则<br><code>now+1h</code> =  2001-01-01 13:00:00<br><code>now-1h</code>  =  2001-01-01 11:00:00<br><code>now-1h/d</code>  =  2001-01-01 00:00:00 //毫秒减去一小时,约等于到当天起始<br><code>2001.02.01\|\|+1M/d</code> = 2001-03-01 00:00:00 //毫秒加一个月,再约等于到当天起始     </p><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;timestamp&quot;: &#123;</span><br><span class="line">        &quot;time_zone&quot;: &quot;+01:00&quot;,        </span><br><span class="line">        &quot;gte&quot;: &quot;2020-01-01T00:00:00&quot;, </span><br><span class="line">        &quot;lte&quot;: &quot;now&quot;                  </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时区对<code>now</code>不生效</li></ul><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><h3 id="查今天范围内数据-写法应该为"><a href="#查今天范围内数据-写法应该为" class="headerlink" title="查今天范围内数据,写法应该为"></a>查今天范围内数据,写法应该为</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET index&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot; : &#123;</span><br><span class="line">            &quot;timestamp&quot; : &#123;</span><br><span class="line">                &quot;gte&quot; : &quot;now-1h&#x2F;d&quot;,</span><br><span class="line">                &quot;lt&quot; :  &quot;now&#x2F;d&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html#querying-range-fields" target="_blank" rel="noopener">Elasticsearch Reference [7.7] » Query DSL » Term-level queries » Range query</a><br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#date-math" target="_blank" rel="noopener">Elasticsearch Reference [7.7] » REST APIs » API conventions » Common options</a><br><a href="https://www.cnblogs.com/shoufeng/p/11266136.html" target="_blank" rel="noopener">Elasticsearch中如何进行日期(数值)范围查询</a></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Range Query </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用和使用travis自动部署</title>
      <link href="/blog/2020/05/23/Hexo%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BD%BF%E7%94%A8travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/blog/2020/05/23/Hexo%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BD%BF%E7%94%A8travis%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>本文没有太过于详细的Hexo及Travis的教程，主要记录一些笔者在用Hexo在GitHub上搭Blog，并使 用Travis自动部署博客过程中的一些记录点和踩的坑，主要还是偏个人为主，末尾会放出搭建博客过程中参考的一些Blog，写的都挺详细，就不用我再赘述了。</p><a id="more"></a><h2 id="问题及解决办法"><a href="#问题及解决办法" class="headerlink" title="问题及解决办法"></a>问题及解决办法</h2><h2 id="运行hexo-d报错"><a href="#运行hexo-d报错" class="headerlink" title="运行hexo d报错"></a>运行hexo d报错</h2><p>出现<code>TypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be integer. Received an instance of Object</code>,很可能就是node_js版本问题，注意替换版本就可以了，一般使用lts,这里推荐<code>nvm</code>,是一个node_js的开发环境控制工具;</p><h2 id="运行hexo相关命令失败"><a href="#运行hexo相关命令失败" class="headerlink" title="运行hexo相关命令失败"></a>运行hexo相关命令失败</h2><p>按照报错提示运行<code>npm install --save</code>，任然失败，报错为linux软连接失败等相关信息，是因为我的hexo文件夹实在win10下初始化的，然后通过共享文件夹到本机manjaro开发机上进行同步撰写博客，没找到具体原因，猜测大概为底层文件系统原因，最终我的解决方法是在win10 hexo根目录下执行修复命令<code>npm install --save</code>，然后就都恢复了……</p><h2 id="使用yelee主题时-网站在子目录下链接地址错乱"><a href="#使用yelee主题时-网站在子目录下链接地址错乱" class="headerlink" title="使用yelee主题时,网站在子目录下链接地址错乱"></a>使用yelee主题时,网站在子目录下链接地址错乱</h2><p>解决方法:在<a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" rel="noopener">https://github.com/MOxFIVE/hexo-theme-yelee</a>项目下的Issues中有解决 <a href="https://github.com/MOxFIVE/hexo-theme-yelee/issues/171#issuecomment-357471735" target="_blank" rel="noopener">Issues#171</a></p><p>Some suggestions:</p><p>To fix “Tags” and “About me”, change <code>layout/_partial/left-col.ejs</code>, line 73:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- theme.root_url %&gt;&lt;%- url_for(theme.menu[i]) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">i</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">+ <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for(theme.menu[i]) %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">i</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To fix floating homepage buttons on the left side of the posts, change <code>layout/_partial/post-nav-button.ejs</code>, line 9 and 19:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"&lt;%= __('tooltip.back2home') %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">+ <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for('/') %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= __('tooltip.back2home') %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-home"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To fix the “Author” link in the copyright section, change <code>layout/_partial/post/nav.ejs</code>, line 4:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.author</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span> <span class="attr">title</span>=<span class="string">"&lt;%= __('tooltip.back2home') %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=theme.author%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">+ <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">__</span>('<span class="attr">copyright_info.author</span>') %&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for('/') %&gt;"</span> <span class="attr">title</span>=<span class="string">"&lt;%= __('tooltip.back2home') %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=theme.author%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>The reason is that the function url_for() has already taken care of the root directory. Read more: <a href="https://hexo.io/docs/helpers.html#url-for" target="_blank" rel="noopener">https://hexo.io/docs/helpers.html#url-for</a></p><p>I’ve so far encountered those errors, but if there are other errors the solutions will be similar. Hope the author’s gonna fix it soon.</p><h2 id="github图标显示问题"><a href="#github图标显示问题" class="headerlink" title="github图标显示问题"></a>github图标显示问题</h2><p>Step 1: 首先下载一个GitHub图标，放在/yelee/source/img/目录下，命名为GitHub.png，注意是GitHub，而不是Github和github；</p><p>Step 2: 接下来删除在<code>/yelee/source/css/_partial/customise/social-icon.styl</code>的46-50行，然后在<code>img-logo</code> = 添加<code>GitHub white 100</code>。</p><p>GitHub white 100 的意思是github添加白色背景且透明度为100，背景可以自行选择</p><h2 id="Travis相关"><a href="#Travis相关" class="headerlink" title="Travis相关"></a>Travis相关</h2><h2 id="注册Travis"><a href="#注册Travis" class="headerlink" title="注册Travis"></a>注册Travis</h2><p>使用github账户登陆即可</p><h2 id="相关设置"><a href="#相关设置" class="headerlink" title="相关设置"></a>相关设置</h2><p>设置监控哪一个仓库<br>设置github的token,并选为不可见,避免安全风险</p><h2 id="最后给出我的-travis-yml文件"><a href="#最后给出我的-travis-yml文件" class="headerlink" title="最后给出我的.travis.yml文件"></a>最后给出我的.travis.yml文件</h2><p>两个都生效,第一个是网上收集的,但我用的是第二个,Hexo官网上的</p><h3 id="第一份"><a href="#第一份" class="headerlink" title="第一份"></a>第一份</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span>   <span class="comment">#设置语言</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span>     <span class="comment">#设置相应的版本</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">    <span class="attr">directories:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node_modules</span>    <span class="comment">#据说可以减少travis构建时间</span></span><br><span class="line"><span class="comment"># before_install:</span></span><br><span class="line"><span class="comment">#   - npm install -g hexo</span></span><br><span class="line"><span class="comment">#   - npm install -g hexo-cli</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span>   <span class="comment">#安装hexo及插件</span></span><br><span class="line"><span class="comment"># before_script:</span></span><br><span class="line"><span class="comment">#   - npm install -g mocha</span></span><br><span class="line"><span class="comment">#   - git clone --branch master https://github.com/Longxr/Longxr.github.io.git public</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">cl</span>   <span class="comment">#清除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span>   <span class="comment">#生成</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"XXX"</span>   <span class="comment">#修改成自己的github用户名</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"XXX@XXX.com"</span>   <span class="comment">#修改成自己的GitHub邮箱 GH-PAGES-TOCKEN</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"update by Travis-CI"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;GH_token&#125;@$&#123;GH_REF&#125;"</span> <span class="string">master:gh-pages</span> <span class="comment">#GH_token就是在travis中设置的token</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#只监测这个分支，一有动静就开始构建</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/XXX/blog.git</span></span><br></pre></td></tr></table></figure><h3 id="第二份"><a href="#第二份" class="headerlink" title="第二份"></a>第二份</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span>  <span class="comment"># use nodejs v10 LTS</span></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># build master branch only</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span> <span class="comment"># generate static files</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line">  <span class="attr">skip-cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github-token:</span> <span class="string">$ghtoken</span></span><br><span class="line">  <span class="attr">keep-history:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">local-dir:</span> <span class="string">public</span></span><br></pre></td></tr></table></figure><h2 id="我的博客仓库"><a href="#我的博客仓库" class="headerlink" title="我的博客仓库"></a>我的博客仓库</h2><p>如有疑问可以访问查看源码:<a href="https://github.com/panxt/blog" target="_blank" rel="noopener">BLOG</a></p><h2 id="Travis不能免费无限制使用，改用GitHub-Actions进行部署blog"><a href="#Travis不能免费无限制使用，改用GitHub-Actions进行部署blog" class="headerlink" title="Travis不能免费无限制使用，改用GitHub Actions进行部署blog"></a>Travis不能免费无限制使用，改用GitHub Actions进行部署blog</h2><p>参考文档：<br><a href="https://mdnice.com/writing/5c0ea88d4f624fa2b047463a0e24a9ef" target="_blank" rel="noopener">Hexo+GitHub Actions搭建个人博客，实现云端协写作、一键发布</a><br><a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/#%E7%BC%96%E5%86%99-Github-Actions" target="_blank" rel="noopener">利用 Github Actions 自动部署 Hexo 博客</a></p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><p><a href="http://www.isetsuna.com/hexo/install-config/" target="_blank" rel="noopener">Hexo博客系列（二）：安装和配置 | Setsuna’s Blog</a><br><a href="https://www.cnblogs.com/alex21/p/5376578.html" target="_blank" rel="noopener">hexo - 学渣的成长之路 - 博客园</a><br><a href="https://bestzuo.cn/posts/blog-establish.html" target="_blank" rel="noopener">Hexo博客+Next主题深度优化与定制 - Sanarous的博客</a><br><a href="https://blog.ritboy.com/articles/4283262726.html" target="_blank" rel="noopener">使用Travis CI自动部署Hexo博客 | Ritboy’s Blog</a><br><a href="https://longxuan.ren/2017/05/10/Hexo-Travis-CI/" target="_blank" rel="noopener">Hexo使用Travis CI自动化部署 | Longxr’s blog</a><br><a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">将 Hexo 部署到 GitHub Pages | Hexo</a>  </p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> travis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
